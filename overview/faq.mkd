---
layout: default
title: FAQ - OpenXC
---

<div class="page-header">
    <h1>Frequently Asked Questions</h1>
</div>

<dl>

<dt>If it's an open source project, why can't I access the source code on
GitHub?</dt>
<dd>OpenXC is in a limited early release as of January 2012, and the source code
is not widely available yet. We have developers at various universities and
companies creating the first OpenXC applications and tripping over the biggest
bugs so you don't have to. We're adding more and more people to the project
every day - drop your e-mail in the form on the <a href="/">front page</a> to
get in the queue. OpenXC will not stay closed for much longer, we ask that you
have patience while we make sure the system is as ready as possible for a wider
launch.
</dd>

<dt>Who can I contact at Ford about OpenXC?</dt>
<dd>The Ford team is always reading the
<a href="http://groups.google.com/group/openxc">Google Group</a>, and that's the
best place to get an answer to your question. Once the code is released on
GitHub, you won't need any special permission or agreements from us to get
started!
</dd>

<dt>Why not just use one of the many commercial OBD-II scanners instead of
OpenXC?</dt>

<dd>

<p> Certainly, OBD-II has the advantage of being a standard across all vehicles
sold in North America since 1996, but the standard message set primarily
concerns the emissions powertrain. The rest of the diagnostic messages are
non-standard and not available to the public (and certainly not an open source
project). <a href="http://www.autoenginuity.com/products-software.html#EI01">
AutoEnginuity</a>, an OBD-II scanner manufacturer explains it well:
</p>

<blockquote>
Although Ford does implement the largest subset of the OBD-II standard, the
typical vehicle only supports 20 - 40 sensors and is limited to emissions
powertrain.
</blockquote>

<p>
This situation is not unique to Ford - the majority of OBD-II PIDs are
non-standard.
</p>

<p>
OpenXC connects the OBD-II port, but it does not currently get data from
OBD-II diagnostic messages. The OpenXC CAN translator listens passively to the
many CAN messages already flying across the buses that include data not covered
by standard OBD-II messages. This includes nearly every sensor on vehicle, but
they are unfortunately non-standard as well. It's up to each auto company to
decide how much access they grant by either providing the CAN message
definitions or a pre-compiled OpenXC translator binary.
</p>

<p>
The most important difference between OpenXC and existing tools is the standard
programming language and OS agnostic
 <a href="/vehicle-interface/output-format.html">output</a> sent via USB.
The reference host device is <a href="/android/host.html">Android</a>, but
there's no reason you couldn't use a Windows or Linux laptop with a USB port
(i.e. any of them). A port of the
 <a href="/android/api-guide.html">openxc-android</a> library to Python or
plain old (non-Android) Java would be a great addition to the project.
</p>

<a href="http://en.wikipedia.org/wiki/OBD-II_PIDs#Non-standard_PIDs">Source</a>

<dt>Why does use a separate device to connect to the vehicle instead of
integrating it into the host device (Android or PC)?</dt>

<dd>Very few if any vehicle manufacturers release their CAN message definitions. If
the translation from proprietary vehicle messages to the standard OpenXC
equivalents was performed in the same environment as third-party applications,
it could be more vulnerable to reverse engineering. The strict physical
separation of translation from user code provides stronger assurance that the
message definitions will remain private, and the CAN bus will be protected from
malicious writes from bad applications.</dd>

<dt>How do I connect my host device to the web when I'm driving around town?</dt>
<dd>
The device we recommend, the Toshiba Thrive, doesn't have 3G built-in. On the
positive side, this means that the tablet is quite inexpensive even without a
contract with a wireless provider. On the downside, it only connects to Wi-Fi
for Internet and 3G dongles aren't well supported in Android as of 3.1. You're
not out of luck, though - we recommend buying a 3G Wi-Fi hotspot from your
preferred wireless provider like the MiFi and connecting your host device to
this over Wi-Fi. Simple and flexible.

If you'd like to use an Android tablet with 3G built-in (like the Samsung Galaxy
Tab from Verizon), that should work, too.
</dd>


</dl>
