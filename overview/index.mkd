---
layout: about
title: Overview - OpenXC
---

<div class="page-header">
    <h1>About</h1>
</div>

OpenXC is a combination of open source hardware and software that lets you
extend your vehicle with custom applications and pluggable modules. It uses
standard, well-known tools to open up a wealth of data from the vehicle to
developers.

Vehicles are indisputably becoming more and more connected, but until now the
consumer hasn't had much control over the exact capabilities of their car. Very
few infotainment systems are user upgradable, and thanks to the extremely fast
pace of consumer electronics and the Web (especially when compared to the long
development cycles in the automotive industry) next-gen can quickly become
last-gen. This applies to both hardware and software - for example, the 2G radio
in the first iPhone was quickly upgraded in the next model, but a vehicle from
2007 with an embedded modem would likely be stuck with it for the life of the
vehicle. The average lifespan of a vehicle today is 13 years; a smartphone is 6
to 9 months.

<div class="page-header">
    <h3>Guiding Principles</h3>
</div>

What if the user-facing hardware and software was independent from any one
vehicle, and could be purchased and installed by consumers as an aftermarket
add-on? What if the infotainment hardware was more modular and user-upgradable,
and perhaps most importantly, transferable from one vehicle to another?
Consumers have already taken this approach to some degree by using their
smartphones as the primary navigation, media and communications hub. However,
the known dangers of using a handheld device while driving necessitate better
vehicle integration to provide safer, more context aware interfaces.

<div class="page-header">
    <h3>Customer Experience</h3>
</div>

OpenXC completely changes the customer experience with in-vehicle technology.
Consider if every new vehicle included a built-in base board at no cost to the
customer. This base board has connections to the dashboard interface and audio
system and a [vehicle interface](/vehicle-interface/hardware.html) - we
would consider this OpenXC-compatible. The consumer has the option of making the
vehicle OpenXC-enabled by adding a ~$40 module that includes the host device
where OpenXC applications actually run. Other modules that add hardware features
can be purchased separately and plugged into the base board like any USB device.

Don't need Bluetooth? Don't buy the Bluetooth module. Want a 3G connection? Buy
a 3G USB adapter from your preferred wireless provider. 4G just came out? Buy a
new adapter and swap it in.

Older vehicles can also benefit from this approach by using an aftermarket base
board. The same host device and modules can be used in a car from 2002 as long
as a standard interface to the vehicle's subsystems is exposed to applications.
The portability also benefits those in rental cars, car sharing programs and
customers of short-term rentals like ZipCar. Consumers might even own an OpenXC
system without owning a vehicle.

<div class="page-header">
    <h3>Developer Experience</h3>
</div>

OpenXC opens up a previously opaque environment to an entirely new class of
developers, who will bring more ideas and solutions to the table than any one
company or industry consortium could dream up. The ideal method of distribution
for applications isn't clear yet, but it could range from a "walled garden" app
market (a la iTunes) to pre-loaded USB flash drives sold at drugstore checkout
counters.

<div class="page-header">
    <h3>Architecture</h3>
</div>

Modern automobiles are laced with a number of microcontrollers and sensors that
monitor and control everything from the throttle position to the ambient air
temperature. These devices communicate with each other over a wired in-vehicle
network, a [CAN bus][can].

<div class="alert alert-info">
Did you just buy a <a href="/vehicle-interface/hardware.html">vehicle interface</a> and you
want to do a quick "smoke test" and verify it works? <strong>Jump ahead to the <a
href="/getting-started/first-steps.html">first steps.</a></strong>
</div>

![In-vehicle Network](/images/can-diagram.png)

The CAN bus is one of the primary components of [OBD-II][obd2], a vehicle
diagnostic standard mandatory for all cars sold in the United States since 1996.
The OBD-II standard sends and receives messages on the CAN bus. If you've ever
watched your mechanic plug a tool in somewhere underneath your steering wheel,
or seen a vehicle monitoring app for your smartphone, that's OBD-II in action.
You'll always find the port by the driver's knees.

![OBD-II Port with Cable in a Mustang](/images/obd-ii-cable.jpg)

This means that every vehicle in the United States has a very accessible place
to connect to the same network used by all of the vehicle's subsystems. That's
where OpenXC comes in - with some knowledge of how to process the messages on
the network, you can start to get valuable data out of your car.

The OpenXC architecture is divided into **two parts**:

![Boxed vehicle interface](/images/cantranslator-boxed.jpg)

The <a href="/vehicle-interface/index.html">**vehicle interface (VI)**</a> is a
device that plugs into the OBD-II port (and thus to the CAN bus), reads and
translates CAN messages into a [standard cross-vehicle
format](https://github.com/openxc/openxc-message-format). The translated
messages can be sent over USB or Bluetooth, so they can be read by any computer
or smartphone.

<div class="row">
    <div class="span4">
        <img src="/images/android-in-car.jpg"/>
    </div>
    <div class="span4 stacked">
        <img src="/images/screenshots/mpg-app-1.png"/>
        <img src="/images/screenshots/mpg-app-2.png"/>
    </div>
</div>

The <a href="/host-devices/index.html">**host device**</a> connects to the
vehicle interface and reads the translated vehicle data (e.g. an Android tablet
or Python environement on a laptop). OpenXC developers can write applications on
this device using the data.

![OpenXC Architecture Diagram](/images/openxc-architecture.jpeg)

[can]: http://en.wikipedia.org/wiki/CAN_bus
[obd2]: http://en.wikipedia.org/wiki/On-board_diagnostics


<div class="page-header">
    <h2>Related Work</h2>
</div>

There are some existing projects trying to accomplish similar things to OpenXC
by making the vehicle more programmable. A by no means complete list:

* [nOBDy](http://nobdy.wikia.com/wiki/Nobdy_Wiki)
* [MirrorLink](http://www.mirrorlink.com)
* [AppLink](http://developer.ford.com)
* [openguage](http://code.google.com/p/opengauge/)
