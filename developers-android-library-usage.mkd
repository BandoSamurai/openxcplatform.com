---
layout: default
permalink: /developers/android/library-usage.html
---

Android Library Usage
=============

Vehicle measurements are accessed through an [Android service][services]. Your
application connects to an in-process [VehicleService][] which handles reading
fresh data from the vehicle.

### Service Binding

You must first [bind][binding] with the [VehicleService][] before you can receive
any vehicle data.

Request to bind with the service in the normal fashion:

    Intent intent = new Intent(this, VehicleService.class);
    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);

Then, in your `onServiceConnected()` grab the service handle and cast it to the
correct type:

    VehcileService vehicleService;
    private ServiceConnection mConnection = new ServiceConnection() {
        // Called when the connection with the service is established
        public void onServiceConnected(ComponentName className, IBinder service) {
            vehicleService = ((VehicleService.VehicleServiceBinder)
                    service).getService();
        }

        // Called when the connection with the service disconnects unexpectedly
        public void onServiceDisconnected(ComponentName className) {
            vehicleService = null;
        }
    };

### Synchronous

Once the service is bound and you have a connection to it in your activity, you
can receive measurements on demand (i.e. synchronously).

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);

### Asynchronous

If you need to be kept up-to-date on any vehicle measurement, you can also
register with the service to be notified of updates.

    VehicleSpeed.Listener listener = new VehicleSpeed.Listener() {
        public void receive(VehicleMeasurement measurement) {
            final VehicleSpeed speed = (VehicleSpeed) measurement;
            if(!speed.isNone()) {
                // do stuff with the measurement
            }
        }
    };
    vehicleService.addListener(VehicleSpeed.class, listener);

### Measurements

You've probably noticed that vehicle data is returned encapsulated in an object.
In the examples above, we used the [VehicleSpeed][] measurement. All of the data
types supported by OpenXC are provided as children of the [Measurement][] class.

The parent class provides a standard interface for all measurements, starting
with a way to retrieve its value:

    vehicleService.get(VehicleSpeed.class);

Occasionally a measurement will not have been received from the CAN translator
yet - it could be a malfunction, or you're just checking too early for an
infrequently updated measurement:

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);
    if(measurement.isNone()) {
        // do stuff with it
    }

You can check the age of a measurement to determine how long ago the state was
actually reflected in the physical vehicle:

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);
    if(measurement.getAge() < 10) {
        // only if age is less than 10 seconds
    }

The range of every measurement is defined in the class, and can be queried
programmatically if you need to figure out your the current value's relative
position:

    range = measurement.getRange();
    int percentage = measurement.getValue() / range;

## Testing

### Button Events

Unfortunately the Android emulator does not allow us to send arbitrary events
from button presses without editing the source. In order to test your button
event handlers, the recommended method it to write them in such a way that they
can accept either VehicleButtonEvents or regular Android key events as input.
You may want a flag to disable the Android key events when running in
production.

For example, the OpenXC specification includes a signal for a D-pad style
controller. The 2012 Ford Focus has such a controller on the steering wheel.
The Android emulator will send `KEYCODE_DPAD_*`
[KeyEvents](http://developer.android.com/reference/android/view/KeyEvent.html)
when you press the arrows on your computer's num pad. These are a good parallel
and it should be simple to have your event handlers watch for *either* the
vehicle D-pad event or the Android event.

Here's an example - if you want your application to send a text message when the
user presses the down button on the steering wheel, write a function that
performs the action:

    public void sendTextMessage() {
        // send a text message
        ...
    }

To hook this up to Android `KeyEvent`, define an `onKey` method in your
activity:

    @Override
    public boolean onKeyDown(int i, KeyEvent event) {
        if (i == KeyEvent.KEYCODE_DPAD_DOWN) {
            sendTextMessage();
            return true;
        }
        super.onKeyDown(i, event);
        return true;
    }

This connects your functionality to the virtual button in the Android emulator.
To have this actually work in the car, you need to register a handler for the
VehicleButtonEvent.

    VehicleButtonEvent.Listener listener = new VehicleButtonEvent.Listener() {
        public void receive(VehicleMeasurement measurement) {
            final VehicleButtonEvent event (VehicleButtonEvent) measurement;
            if(!event.isNone()) {
                try {
                    if(event.getAction() ==
                                VehicleButtonEvent.ButtonAction.PRESSED,
                            && event.getValue() ==
                                VehicleButtonEvent.ButtonId.DOWN) {
                        sendTextMessage();
                    }
                } catch(NoValueException e) {}
            }
        }
    }

### Emulated Vehicle Measurements

The library ships with a method for playing back previously recorded vehicle
measurement trace files for testing. The [VehicleMeasurement][] objects received
by your application are identical to those received from a live vehicle.

The trace file format is simply a plain text file of OpenXC JSON messages
separated by newlines, e.g.:

    {"name": "vehicle_speed", "value": 42}
    {"name": "windshield_wiper_speed", "value": 11}
    {"name": "steering_wheel_angle", "value": 94.1}
    {"name": "transmission_gear_position", "value": "FIRST"}

In fact, this is the same method used by some of the instrumentation tests. Once
you've created a file either by recording the output of the CAN translator
module or building one by hand, add it to your testing application's raw
resources (`yourapp/res/raw/yourtrace`). When binding with the
[VehicleService][], specify the type of data source and your trace file:

        Intent startIntent = new Intent();
        startIntent.setClass(getContext(), VehicleService.class);
        startIntent.putExtra(RemoteVehicleService.DATA_SOURCE_NAME_EXTRA,
                TraceVehicleDataSource.class.getName());
        startIntent.putExtra(RemoteVehicleService.DATA_SOURCE_RESOURCE_EXTRA,
                "resource://" + R.raw.yourtrace);
        service = ((VehicleService.VehicleServiceBinder)
                bindService(startIntent)).getService();
        service.waitUntilBound();

The final `service.waitUntilBound()` line is optional - it causes the thread to
block until the service is ready to start playing back the trace - but can be
useful for testing when you need to make sure you will get a measurement back
from the system.

We have two short trace files available for testing: [idling while parked][] and a
[short drive][].

[idling while parked]: http://dl.dropbox.com/u/980077/openxc/c346_parked.json
[short drive]: http://dl.dropbox.com/u/980077/openxc/c346_driving.json

[apache]: http://www.apache.org/licenses/LICENSE-2.0.html
[binding]: http://developer.android.com/guide/topics/fundamentals/bound-services.html#Binding)
[services]: http://developer.android.com/guide/topics/fundamentals/services.html
[AIDL]: http://developer.android.com/guide/developing/tools/aidl.html
[OpenXC]: http://openxcplatform.com

[VehicleService]: /openxc-android/com/openxc/VehicleService.html
[VehicleMeasurement]: /openxc-android/com/openxc/measurements/VehicleMeasurement.html
[VehicleSpeed]: /openxc-android/com/openxc/measurements/VehicleSpeed.html
[Measurement]: /openxc-android/com/openxc/measurements/Measurement.html
