---
layout: developer
title: VI Firmware - OpenXC
---

<div class="page-header">
    <h1>Vehicle Interface Firmware</h1>
</div>

Before you can use a vehicle interface (VI), it has to be programmed with a
firmware that understands data sent by your car. You have a few options:

**On-board Diagnostics (OBD-II) Data**

To read *standard OBD-II diagnostics data*, use the open source OBD-II OpenXC
firmware. You can download the latest compiled  version of that firmware from
the [vi-firmware releases page](https://github.com/openxc/vi-firmware/releases).

Grab the `openxc-obd2-firmware-*.zip` file for the latest version, which
contains the OBD-II firmware for each of the supported vehicle interfaces.

Next, look up the instructions for uploading the firmware to your vehicle
interface on the [supported VI hardware page](/vehicle-interface/hardware.html)
- it's different for each.

**Expanded Proprietary Data**

To read expanded data from a particular car, look for firmware distributed as
pre-compiled binaries by your car's manufacturer. Check the [list of supported
vehicles](/hardware/vehicles.html) for your car's make and model and for links
to download the firmware.

Once you have a binary firmware, look up the instructions for uploading the
firmware to your vehicle interface on the [supported VI hardware
page](/vehicle-interface/hardware.html)
- it's different for each.

**Emulated Data**

If you don't have access to a car and you want to verify the connection to the
VI from your host device (or it's winter in Michigan and you'd just rather stay
inside), there is a simple emulator firmware on the [vi-firmware releases
page](https://github.com/openxc/vi-firmware/releases)
(grab `openxc-canemulator-firmware-*.zip` from the latest version). It generates
fake vehicle data and continuously sends it over USB and Bluetooth as if it were
live data. It's completely random data, so don't try and build an app against
it.

Once you download the emulator firmware, look up the instructions for your
vehicle interface on the [supported VI hardware
page](/vehicle-interface/hardware.html) - it's different for each.


<div class="page-header">
    <h2>Advanced: Custom CAN Signal Definition</h2>
</div>

Developers that know the details of the CAN bus they will be using can choose to
implement their own signal definitions for the VI. The process is
described in the [advanced firmware docs](/firmware/advanced-intro.html).
