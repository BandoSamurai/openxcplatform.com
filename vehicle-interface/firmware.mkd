---
layout: default
title: Firmware - OpenXC
---

<div class="page-header">
    <h1>CAN Translator Firmware</h1>
</div>

<div class="pull-right well">
    <ul class="nav nav-list">
        <li class="nav-header">Next Step</li>
        <li><a href="/vehicle-interface/testing.html">
            Test your CAN translator <i class="icon-arrow-right"></i>
        </a></li>
    </p>
</div>

<div class="page-header">
    <h2>Updating with a .hex File</h2>
</div>

Updates to the CAN translator firmware may be distributed as pre-compiled
binaries, e.g. if they are distributed by an OEM who does not wish to make the
CAN signals public. If that's the case for your vehicle, you will have a `.hex`
file and can use the [upload_hex.sh][] script to update your device.

You need to have the **mini-USB** port connected to your computer to upload a
new firmware. This different than the USB port that you use to read vehicle
data - see the <a href="/vehicle-interface/index.html#connections">device
connections</a> section to make sure you have the correct cable attached.

The script requires that `avrdude` is installed. There are two possible ways to
get that dependency.

<div class="alert alert-info">
If you are using Windows or OS X, you also need to install the
<a href="http://www.ftdichip.com/Drivers/VCP.htm">FTDI driver</a> - get the
setup executable version from that page.
</div>

*With MPIDE*

If you have [MPIDE][] installed, that includes a version of avrdude. You need to
set the `MPIDE_DIR` environment variable in your terminal to point to the folder
where you installed MPIDE. Once set, you should be able to use
[upload_hex.sh][].

*Without MPIDE*

If you do not have MPIDE installed, you can find `avrdude` in your
Linux distribution's package manager, through Homebrew in Mac OS X, or in
Windows install either [WinAVR][winavr] or the `avrdude` package in Cygwin.

If you really feel like it, building `avrdude` from source should be possible in
Cygwin, but you will need to determine which COM port the chipKIT shows up as
and find the associated device link (e.g. COM(x) == /dev/ttyS(x-1) in Cygwin's
shell). Once you've determined the path to the device, set the `PORT`
environment variable before running `upload_hex.sh`.

**Flashing**

Once you have `avrdude` installed, run the script with the `.hex` file you
downloaded:

{% highlight sh %}
$ sh ./upload_hex.sh new-version.hex
{% endhighlight %}

Windows users can use the GUI provided by [WinAVR][winavr], run the
`upload_hex.sh` script from Powershell or use Cygwin. When using the script, you
will need to figure out which COM port the device shows up as - the script
default is `com4` but it may be different on your computer.

To specify use `com3` for example:

{% highlight sh %}
$ sh ./upload_hex.sh new-version.hex com3
{% endhighlight %}

In Windows, this command will only work in Powershell, not the standard cmd.exe.

<div class="page-header">
    <h2>Custom CAN Signal Definition</h2>
</div>

Developers that know the details of the CAN bus they will be using can choose to
implement their own signal definitions for the translator. The documentation for
this process is available at the [cantranslator][] repository (only accessible
if logged in to GitHub and with access to the early release).

<div class="page-header">
<h2>Next Steps</h2>
</div>

You're now ready to [test your CAN translator in a vehicle][testing].

[winavr]: http://winavr.sourceforge.net/
[upload_hex.sh]: https://github.com/openxc/cantranslator/blob/master/upload_hex.sh
[MPIDE]: https://github.com/chipKIT32/chipKIT32-MAX/downloads
[testing]: /vehicle-interface/testing.html
[Cygwin]: http://www.cygwin.com/
