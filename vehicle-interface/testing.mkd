---
layout: default
title: Vehicle Interface Testing - OpenXC
---

<div class="page-header">
    <h1>Vehicle Interface Testing</h1>
</div>

Make sure that the tablet and CAN translator module are out of the way of the
driver. They should be securely held down or preferably with another person in
the passenger seat. The OBD-II and USB cables should also be routed away from
the brake and accelerator pedals to avoid getting tangled. You should also avoid
draping the cables over the steering wheel, as they can get caught in the
turning mechanism and make steering difficult.

The recommended location for the CAN translator is between seats or on the
passenger seat, with the OBD-II cable routed along the floor on the driver's
side, around the back of the seat and up between the seats.

<div class="alert alert-error">
Most importantly, <strong>do not</strong> try to test your application while in
motion! Testing OpenXC apps while moving is absolutely a two person job.
</div>

![Completed CAN translator](/images/assembly/openxc-assembly-19.jpg)

<div class="page-header">
    <h2>Source Code</h2>
</div>

The [cantranslator][] repository (only accessible if logged in to GitHub and
with access to the early release) contains the C source code that runs on the
Arduino-compatible chipKIT device. Most OpenXC users won't need to touch this
component - they will most likely be using a pre-built binary on the vehicle
interface that knows about proprietary vehicle signals.

<div class="page-header">
    <h2>Data Reader</h2>
</div>

The [reader.py][] Python program in the [cantranslator][] repository can be used
to view the output of the CAN translator over micro-USB. Just plug it in and run
the script with the `--verbose` flag to have all messages parsed and printed to
stdout.

{% highlight sh %}
# Show a real-time stream of all messages
$ python reader.py -v
...

# Show a dashboard summary of the current values
$ python reader.py --dashboard
...
{% endhighlight %}

If you get an error when trying to run the dashboard regarding the window, try
making the terminal window a bit taller - it has a minimum size.

It may also be necessary to check the current version of the software you have
on a CAN translator - the `--version` flag will tell you that.

{% highlight sh %}
$ python reader.py --version
Device is running version 1.0
{% endhighlight %}

You can write a one-off message back to the CAN translator (which may or may not
write it through to the CAN bus, depending on if it is an approved signal or
not) using the `-w` flag:

{% highlight sh %}
$ python -w steering_wheel_angle 42.0
{% endhighlight %}

### Dependencies

The [reader.py][] script requires the `pyusb` Python library to be installed
along with a backing system library for accessing USB devices. `libusb-1.0` is
the recommended library.

**Mac OS X**

First install [homebrew][], then run:

{% highlight sh %}
$ brew install libusb
{% endhighlight %}

**Ubuntu**

{% highlight sh %}
$ sudo apt-get install libusb-0.1.4 python-setuptools
{% endhighlight %}

**All platforms**

{% highlight sh %}
$ sudo -E easy_install pyusb
{% endhighlight %}

[homebrew]: http://mxcl.github.com/homebrew/
[cantranslator]: https://github.com/openxc/cantranslator
[reader.py]: https://github.com/openxc/cantranslator/blob/master/reader.py
