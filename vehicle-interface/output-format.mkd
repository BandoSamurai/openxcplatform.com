---
layout: default
title: Output Format - OpenXC
---

<div class="page-header">
    <h1>Translation Output Format</h1>
</div>

<div class="pull-right well">
    <ul class="nav nav-list">
        <li class="nav-header">Next Step</li>
        <li><a href="/vehicle-interface/firmware.html">
            Flash the firmware <i class="icon-arrow-right"></i>
        </a></li>
    </p>
</div>

The microcontroller has a USB controller operating in USB device mode. It sends
the generic vehicle data over via bulk USB transfer as packed JSON.

There are two valid message types - single valued and event.

<div class="page-header">
    <h3>Single Valued</h3>
</div>

The expected format of a single valued message is:

{% highlight javascript %}
{"name": "steering_wheel_angle", "value": 45}
{% endhighlight %}

<div class="page-header">
    <h3>Event</h3>
</div>

The expected format of an event message is:

{% highlight javascript %}
{"name": "button_event", "value": "up", "event": "pressed"}
{% endhighlight %}

This format is good for something like a button event, where there are two
discrete pieces of information in the measurement.

<div class="alert alert-info">
There may not be a 1:1 relationship between input and output signals - i.e. raw
engine timing CAN signals may be summarized in an "engine performance" metric on
the abstract side of the interface.
</div>

<div class="page-header">
    <h2>Signal List</h2>
</div>

This is the list of signals officially supported by the Android library. Be
aware that vehicles do not necessarily support all of these signals - there are
plans to be able to check for the existence of a signal before using it.

There are potentially many more signals available on the CAN bus, but we've
selected a small set of the most interesting signals to get started.

<div class="alert">
    <strong>Disclaimer:</strong> We make no claims as to the accuracy or
    reliability of any of these pieces of data, and provide no warranty as such.
</div>

<dl>
    <dt>steering_wheel_angle</dt>
    <dd>-600 to +600 degrees</dd>

    <dt>torque_at_transmission</dt>
    <dd>-500 to 1500 Nm</dd>

    <dt>engine_speed<dt>
    <dd>0 to 16382 RPM</dd>

    <dt>vehicle_speed</dt>
    <dd>0 to 655 km/h (this will be positive even if going in reverse as it's
        not a velocity, although you can use the gear status to figure out
        direction)</dd>

    <dt>accelerator_pedal_position</dt>
    <dd>0 to 100%</dd>

    <dt>parking_brake_status</dt>
    <dd>Boolean (true == brake engaged)</dd>

    <dt>brake_pedal_status</dt>
    <dd>Boolean (True == pedal pressed)</dd>

    <dt>transmission_gear_position</dt>
    <dd>States: first, second, third, fourth, fifth, sixth, seventh, eighth,
            reverse, neutral</dd>

    <dt>odometer</dt>
    <dd>0 to 16777214 km</dd>

    <dt>fine_odometer_since_restart</dt>
    <dd>0 to 4294967295.0 km (this has a much higher resolution than the
        odometer, but it restarts back to zero every time the vehicle
        starts)</dd>

    <dt>ignition_status</dt>
    <dd>States: off, accessory, run, start</dd>

    <dt>fuel_level</dt>
    <dd>0 - 100%</dd>

    <dt>fuel_consumed_since_restart</dt>
    <dd>0 - 4294967295.0 L (this goes to 0 every time the vehicle restarts)</dd>

    <dt>door_status</dt>
    <dd>Value is State: driver, passenger, rear_left, rear_right.
        Event is Boolean: true == ajar</dd>

    <dt>headlamp_status</dt>
    <dd>Boolean, true is on</dd>

    <dt>high_beam_status</dt>
    <dd>Boolean, true is on</dd>

    <dt>windshield_wiper_status</dt>
    <dd>Boolean, true is on</dd>

    <dt>latitude</dt>
    <dd>-89.0 to 89.0 degrees</dd>

    <dt>longitude</dt>
    <dd>-179.0 to 179.0 degrees</dd>

    <dt>button_event</dt>
    <dd>Value is State: left, right, up, down, ok.
        Event is State: idle, pressed, released, held_short, held_long, stuck</dd>
</dl>

<div class="page-header">
<h2>Next Steps</h2>
</div>

Before you can receive data from a vehicle, you need to [load the proper firmware
version][firmware].

[firmware]: /vehicle-interface/firmware.html
