---
layout: default
title: Output Format - OpenXC
---

<div class="page-header">
    <h1>Translation Output Format</h1>
</div>

<div class="pull-right well">
    <ul class="nav nav-list">
        <li class="nav-header">Next Step</li>
        <li><a href="/vehicle-interface/firmware.html">
            Flash the firmware <i class="icon-arrow-right"></i>
        </a></li>
    </ul>
</div>

The vehicle interface sends generic vehicle data over one or more output
interfaces (e.g. USB or Bluetooth) as JSON objects, separated by newlines.

The OpenXC message format is documented and versioned in a [separate
repository](https://github.com/openxc/openxc-message-format).

If you're creating a web application that uses OpenXC data, this format is also
used for trace files and with the
[Uploader](https://github.com/openxc/openxc-android/blob/master/openxc/src/com/openxc/sinks/UploaderSink.java)
built into the Android library. There's an [example web logging
example](https://github.com/openxc/web-logging-example) in Python that
illustrates a working example of how to receive and parse OpenXC data over HTTP.

<div class="page-header">
    <h2>Vehicle Data</h2>
</div>

This is the list of signals officially supported by the Android library. Be
aware that vehicles do not necessarily support all of these signals - there are
plans to be able to check for the existence of a signal before using it.

There are potentially many more signals available on the CAN bus, but we've
selected a small set of the most interesting signals to get started.

<div class="alert">
    <strong>Disclaimer:</strong> We make no claims as to the accuracy or
    reliability of any of these pieces of data, and provide no warranty as such.
</div>

<div class="alert alert-info">
    <strong>Ford specific frequencies:</strong> The frequencies listed here are
    for the Ford pre-compiled binary firmware. Some frequencies are given as a
    range because the rate has been slowed down a bit in the firmware so Android
    devices or data loggers aren't overwhelmed. If you have a use for the
    maximum frequency mentioned, post in the <a
    href="http://groups.google.com/group/openxc">Google Group</a> and we can
    update the binaries or release a "high speed" version.
</div>

<dl>
    <dt>steering_wheel_angle</dt>
    <dd>
        -600 to +600 degrees
        <p><strong>Ford frequency:</strong> 6Hz (max 90Hz)</p>
    </dd>

    <dt>torque_at_transmission</dt>
    <dd>
        -500 to 1500 Nm
        <p><strong>Ford frequency:</strong> 60Hz</p>
    </dd>

    <dt>engine_speed<dt>
    <dd>
        0 to 16382 RPM
        <p><strong>Ford frequency:</strong> 4Hz (max 60Hz)</p>
    </dd>

    <dt>vehicle_speed</dt>
    <dd>0 to 655 km/h (this will be positive even if going in reverse as it's
        not a velocity, although you can use the gear status to figure out
        direction)

        <p><strong>Ford frequency:</strong> 4Hz (max 60Hz)</p>
    </dd>

    <dt>accelerator_pedal_position</dt>
    <dd>
       0 to 100%
        <p><strong>Ford frequency:</strong> 60Hz</p>
    </dd>

    <dt>parking_brake_status</dt>
    <dd>
        Boolean (true == brake engaged)
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>brake_pedal_status</dt>
    <dd>
        Boolean (True == pedal pressed)
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>transmission_gear_position</dt>
    <dd>
        States: first, second, third, fourth, fifth, sixth, seventh, eighth,
            reverse, neutral
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>odometer</dt>
    <dd>
        0 to 16777214.000 km, with about .2m resolution
        <p><strong>Ford frequency:</strong> 10Hz</p>
    </dd>

    <dt>ignition_status</dt>
    <dd>
        States: off, accessory, run, start
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>fuel_level</dt>
    <dd>
        0 - 100%
        <p><strong>Ford frequency:</strong> 48Hz</p>
    </dd>

    <dt>fuel_consumed_since_restart</dt>
    <dd>
        0 - 4294967295.0 L (this goes to 0 every time the vehicle restarts, like
        a trip meter)
        <p><strong>Ford frequency:</strong> 10Hz</p>
    </dd>

    <dt>door_status</dt>
    <dd>
        Value is State: driver, passenger, rear_left, rear_right.
        Event is Boolean: true == ajar
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>headlamp_status</dt>
    <dd>
        Boolean, true is on
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>high_beam_status</dt>
    <dd>
        Boolean, true is on
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>windshield_wiper_status</dt>
    <dd>
        Boolean, true is on
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>

    <dt>latitude</dt>
    <dd>
        -89.0 to 89.0 degrees with standard GPS accuracy
        <p><strong>Ford frequency:</strong> 1Hz</p>
    </dd>

    <dt>longitude</dt>
    <dd>
        -179.0 to 179.0 degrees with standard GPS accuracy
        <p><strong>Ford frequency:</strong> 1Hz</p>
    </dd>

    <dt>button_event</dt>
    <dd>
        Value is State: left, right, up, down, ok.<br/>
        Event is State: idle, pressed, released, held_short, held_long, stuck<br/>
        (The buttons this message refer to are highly dependent on the specific
        vehicle, but if it's supported, try the steering wheel buttons.)
        <p><strong>Ford frequency:</strong> Sent only if value changes</p>
    </dd>
</dl>

<div class="page-header">
<h2>Next Steps</h2>
</div>

Before you can receive data from a vehicle, you need to [load the proper firmware
version][firmware].

[firmware]: /vehicle-interface/firmware.html
