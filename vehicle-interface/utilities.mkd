---
layout: default
title: Vehicle Interface Utilities - OpenXC
---

<div class="page-header">
    <h1>Vehicle Interface Utilities</h1>
</div>

Make sure that the tablet and vehicle interface module are out of the way of the
driver. They should be securely held down or preferably with another person in
the passenger seat. The OBD-II and USB cables should also be routed away from
the brake and accelerator pedals to avoid getting tangled. You should also avoid
draping the cables over the steering wheel, as they can get caught in the
turning mechanism and make steering difficult.

The recommended location for the vehicle interface is between seats or on the
passenger seat, with the OBD-II cable routed along the floor on the driver's
side, around the back of the seat and up between the seats.

<div class="alert alert-error">
Most importantly, <strong>do not</strong> try to test your application while in
motion! Testing OpenXC apps while moving is absolutely a two person job.
</div>

![Completed vehicle interface](/images/assembly/openxc-assembly-19.jpg)

<div class="page-header">
    <h2>Python Library</h2>
</div>

The `openxc-dashboard` tool available as a part of the [OpenXC Python
library][python-lib] can be used to view the output of the vehicle interface
over USB or UART. This is the most useful tool when determining which vehicle
signals are working.

The Python library can be installed with `pip`:

{% highlight sh %}
$ pip install openxc
{% endhighlight %}

Once installed, you can use any of the [tools it provides][python-lib].

{% highlight sh %}
# Show a dashboard summary of the current values
$ openxc-dashboard
...

# Show a real-time stream of all messages
$ openxc-dump
...
{% endhighlight %}

It may also be necessary to check the current version of the software you have
on a vehicle interface - the `openxc-control` tool can tell you that.

{% highlight sh %}
$ openxc-control version
Device is running version 1.1
{% endhighlight %}

You can also write a message back to the vehicle interface (which may or may not
write it through to the CAN bus, depending on if it is an approved signal or
not):

{% highlight sh %}
$ openxc-control write steering_wheel_angle 42.0
{% endhighlight %}

[python-lib]: https://github.com/openxc/openxc-python

<div class="page-header">
    <h2>Source Code</h2>
</div>

The [vi-firmware][] repository contains the C source code that runs on the
Arduino-compatible chipKIT device. Most OpenXC users won't need to touch this
component - they will most likely be using a pre-built binary on the vehicle
interface that knows about proprietary vehicle signals.

[vi-firmware]: https://github.com/openxc/vi-firmware
