---
layout: default
title: Vehicle Interface - OpenXC
---

CAN Translator Module
=============

The CAN translation module is a microcontroller with two connections - one to
the CAN bus via the OBD-II port, and one to the [host device][] via USB. It
listens for a subset of CAN messages, performs required unit conversion or
factoring and outputs a [generic version][output-format] to the USB
interface.

Unless you are implementing custom CAN messages, you will most likely need a
pre-built OpenXC binary from the manufacturer of your vehicle. Each OEM can
decide whether or not to participate in OpenXC and if so, how many of the
signals they wish to expose.

TODO
There may not be a 1:1 relationship between input and output signals - i.e. raw
engine timing CAN signals may be summarized in an "engine performance" metric on
the abstract side of the interface.


As of January 2012, OpenXC is supported on:

### Supported Vehicles

* Ford Vehicles
    * 2011 - 2013 Focus (gas, electric and hybrid)
    * 2011 - 2012 Fusion
    * 2011 - 2012 Fiesta
    * 2012 Mustang
    * 2011 Figo
    * 2009 F-150
    * 2011 - 2012 E350
    * 2008 S-MAX
* Unconfirmed Ford Vehicles
    * 2006 - 2010, 2013 Fusion
    * 2006 - 2013 Lincoln MKZ
    * 2010, 2011, 2013 Mustang
    * 2011 - 2012 Explorer
    * 2010 - 2013 F-150
    * 2009 - 2013 Flex
    * 2009 - 2013 Lincoln MKT
    * 2012 Edge
    * 2012 Lincoln MKX

## Concepts

TODO

JSON
CAN
OBD-II - include picture of port
normal CAN messages vs diagnostic
CAN messages vs signals
firmware

## Hardware

The current implementation uses the [Digilent chipKIT Max32][chipkit], an
[Arduino-compatible][arduino] microcontroller based on PIC32 instead of ATmega. The network
shield add-on gives the chipKIT two CAN transceivers, which is enough to enable
most OpenXC applications.

The translator is currently powered via its micro-USB board, which is connected
to the host device. CAN messages are received via the OBD-II port in the
driver's footwell.

TODO move parts list here, then link to assembly

### Cables & Ports

There are 3 USB ports on the combined Max32 and Network Shield, so things can
get a bit confusing. They should be used as follows:

* USB-A (square) - not used.
* Mini-USB - connect to the serial console for debugging and to upload new
  firmware.
*  Micro-USB - the OpenXC data is sent through this port - connect it to your
   computer for testing with the Python script, or to an Android tablet to run
   an OpenXC application.

**An Important Note:** In order to power the board via micro-USB, we have to connect
the 5v buses of the chipKIT and network shield. This means that you absolutely
must not plug the mini-USB and micro-USB ports in to different devices at the
same time! This would short 2 different 5v sources together and likely destroy
the chipKIT and network shield.

The OBD-II cable can be plugged in at any time, with the vehicle running or off.
The cable only fits one way, like a USB cable.

### Bluetooth

The CAN translator now has experimental support for using regular old serial
connections, instead of USB. That means that you can use Bluetooth to connect a
tablet (or even a phone!) to your car wirelessly. The Android library also has
experimental support for communicating with a Bluetooth vehicle interface.

![Bluetooth adapter](/images/bluetooth-translator.jpg)

We're using the RN-42 bluetooth adpater, and the instructions for wiring this up
to a chipKIT are in the [cantranslator][] repository on GitHub.

[MPIDE]: https://github.com/chipKIT32/chipKIT32-MAX/downloads
[Max32 page]: http://digilentinc.com/Products/Detail.cfm?NavPath=2,719,895&Prod=CHIPKIT-MAX32.
[cantranslator]: https://github.com/openxc/cantranslator
[output-format]: /vehicle-interface/output-format.html
[host device]: /android/host.html
[chipkit]: http://www.digilentinc.com/Products/Catalog.cfm?NavPath=2,892&Cat=18
[arduino]: http://arduino.cc
