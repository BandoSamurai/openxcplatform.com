---
layout: default
title: Vehicle Interface - OpenXC
---

<div class="page-header">
    <h1>Vehicle Interface</h1>
</div>

<div class="pull-right well">
    <ul class="nav nav-list">
        <li class="nav-header">Next Step</li>
        <li><a href="/vehicle-interface/testing.html">
            Test the vehicle interface <i class="icon-arrow-right"></i>
        </a></li>
    </ul>
</div>

The vehicle interface (VI or CAN translator) is based on a microcontroller with two
external connections - one to the CAN bus via the OBD-II port, and one to the
[host device][] via USB or serial. It passively listens for a subset of CAN
messages, performs required unit conversion or factoring and outputs a [generic
version][output-format] to the USB interface.

Unless you are implementing custom CAN messages, you will most likely need a
[pre-built OpenXC binary](/vehicle-interface/firmware.html) from the
manufacturer of your vehicle. Each OEM can decide whether or not to participate
in OpenXC and if so, which types of data they wish to expose.

<h3 id="obd-pins"><a href="#obd-pins">CAN Buses on OBD Pins</a></h3>

The OBD-II port has one standard pin pair for a single CAN bus, but many
automakers expose other buses on additional, non-standard pin pairs.

<div class="well">
<table>
<thead>
<tr><th>OBD-II Pin Pair</th><th>OpenXC Bus Name</th><th>Other common name</th></tr>
</thead>
<tbody>
<tr>
    <td>6 (+) and 14 (-)</td>
    <td>CAN1</td>
    <td>CAN high / CAN low from ISO 15765-4 and SAE-J2284</td>
</tr>
<tr>
    <td>3 (+) and 11 (-)</td>
    <td>CAN2-1</td>
    <td>Ford secondary, Chrysler CCD</td>
</tr>
<tr>
    <td>1 (+) and 8 (-)</td>
    <td>CAN2-2</td>
    <td>Ford: infotainment, GM: J2411</td>
</tr>
</tbody>
</table>
</div>

Most vehicle data is available from CAN1, and all vehicle interfaces connect
that bus. Some data is available only on CAN2-1 or CAN2-2, and unfortunately
these buses are not currently connected by all vehicle interfaces. To find out
if the informatino you need is on a bus connected by a particular VI, check the
[binary firmware](/vehicle-interface/firmware.html) documentation for your
vehicle manufacturer.

<h2>DIY chipKIT-based VI</h2>

<div class="row">
    <div class="span4">
        <img title="VI with Enclosure"
            src="/images/cantranslator-boxed-vertical.jpg"/>
    </div>
    <div class="span4">
        <img title="VI with Cable"
            src="/images/cantranslator-with-plug.jpg"/>
    </div>
</div>

This VI design was the first OpenXC interface, and is still fully supported by
the latest VI firmware. The design design uses entirely off-the-shelf
components, built on top of a Digilent chipKIT Max32 development board (open
source hardware!). The VI can be assembled for with a range of functionality
starting at around $110, with no soldering required.

The chipKIT VI can connect to up to 2 CAN buses simultaneously, and you can
choose from any of [CAN1, CAN2-1 or CAN2-2](#obd-pins).

[chipKIT-based OpenXC Vehicle Interface
Documentation](http://chipkit-vi.openxcplatform.com/)

<h2 id="cross-chasm"><a href="#cross-chasm">CrossChasm C5</a></h2>

[CrossChasm](http://crosschasm.com/) has graciously made the C5 [available for
purchase](http://crosschasm.com/SolutionCenter/OpenXC.aspx) from their website,
and contributed code to the VI firmware to support their platform.

![CrossChasm C5](/images/crosschasm-c5.png)

The C5 is a very compact interface, so it's great for fleet deployments. It
connects to the [CAN1 bus pins](#obd-pins) only.

[CrossChasm C5
Documentation](http://vi-firmware.openxcplatform.com/en/latest/platforms/crosschasm-c5.html)


<div class="page-header">
<h2>Next Steps</h2>
</div>

Once you've purchased or constructed a vehicle interface, you go through the
[test procedure](/vehicle-interface/testing.html) to make sure it's working
correctly.

[output-format]: /vehicle-interface/output-format.html
[host device]: /android/index.html
[can]: http://en.wikipedia.org/wiki/CAN_bus
[obd2]: http://en.wikipedia.org/wiki/On-board_diagnostics
