---
layout: developer
title: iOS Library API Guide - OpenXC
redirect_from: /developers/iOS/library-usage.html
---

<div class="page-header">
    <h1>TODO: iOS Library API Guide</h1>
</div>

This document describes the interface for the OpenXC library **version 6.0**.

Vehicle data is accessed after adding [ios-framework-source][] to the [demo app][]. 

<div class="page-header">
    <h2 id="vehicle-manager"><a name="vehicle-manager">VehicleManager</a></h2>
</div>

You must first create an object of VehicleManager and set targets before you can receive
any vehicle data. 


{% highlight swift %}
var vm: VehicleManager!
{% endhighlight %}

VehicleManager is a singleton class, so instantiate using shared instance in viewDidLoad():

{% highlight swift %}
vm = VehicleManager.sharedInstance
{% endhighlight %}

This will require you to import OpenXC framework in your class:

{% highlight swift %}
import openXCiOSFramework
{% endhighlight %}

While setting up the callbacks, set the action as a method in viewDidLoad():

{% highlight swift %}
// setup the status callback, and the command response callback
vm.setManagerCallbackTarget(self, action: StatusViewController.manager_status_updates)
vm.setCommandDefaultTarget(self, action: StatusViewController.handle_cmd_response)
    
// turn on debug output
vm.setManagerDebug(true)

{% endhighlight %}


<div class="page-header">
    <h2>Vehicle Messages</h2>
</div>

Once the callbacks are set and you have a connection to it in your controller, you
can start sending and receiving messages with the vehicle interface.

The VehicleMessage is the parent of all message sent to and from the vehicle
interface. You can register to receive asynchronous updates for anything from
all receive messages to only those matching a certain key. All of the examples
here show how to receive updates for more specific subtypes, but you do have the
option of interfacing directly with VehicleMessages.

<div class="page-header">
    <h2>CAN Messages</h2>
</div>

If the attached VI is sending [low-level CAN
messages](http://vi-firmware.openxcplatform.com/en/master/advanced/lowlevel.html),
you can receive them in your iOS application.

First, grab the VehicleManager instance and then set the callback:

{% highlight swift %}
vm = VehicleManager.sharedInstance

vm.setCanDefaultTarget(self, action: CanViewController.default_can_change)
{% endhighlight %}

The callback method will receive the CAN message in the form on dictionary (key-value pairs):

{% highlight swift %}
  func default_can_change(_ rsp:NSDictionary) {
    // extract the CAN message
    let vr = rsp.object(forKey: "vehiclemessage") as! VehicleCanResponse

{% endhighlight %}

To clear the default can target:

{% highlight swift %}
vm.clearCanDefaultTarget()
{% endhighlight %}

<div class="page-header">
    <h2>Diagnostic Requests</h2>
</div>

First, grab the VehicleManager instance and then set the callback:

{% highlight swift %}
vm = VehicleManager.sharedInstance

vm.setDiagnosticDefaultTarget(self, action: DiagViewController.default_diag_response)
{% endhighlight %}

The callback method will receive the Diagnostic response in the form on dictionary (key-value pairs):

{% highlight swift %}
  func default_diag_response(_ rsp:NSDictionary) {
    // extract the diag response message
    let vr = rsp.object(forKey: "vehiclemessage") as! VehicleDiagnosticResponse

{% endhighlight %}


You can also send the request:

{% highlight swift %}
let cmd = VehicleDiagnosticResponse()
// Set the parameters for Diagnostic request: bus, message id, mode, payload

vm.sendDiagReq(cmd);
{% endhighlight %}

To clear the default target:

{% highlight swift %}
vm.clearDiagnosticDefaultTarget()
{% endhighlight %}

<div class="page-header">
    <h2>Commands</h2>
</div>

The commands defined in the [OpenXC message
format](https://github.com/openxc/openxc-message-format#commands){:target="_blank"} that are
supported by your VI firmware can be sent using a `Command` message type.

To send a command and wait to receive a response:

{% highlight swift %}
// set callback
vm.setCommandDefaultTarget(self, action: StatusViewController.handle_cmd_response)

let cm = VehicleCommandRequest()
cm.command = .version
vm.send(cm);
{% endhighlight %}


For commands that don't require any data in the request you can use:

{% highlight java %}
let cm = VehicleCommandRequest()
cm.command = .version
vm.send(cm);
{% endhighlight %}

For commands that require any data in the request you can use:

{% highlight java %}
let cm = VehicleCommandRequest()
cm.command = .passthrough
cm.bus = 1
cm.enabled = true
vm.send(cm);
{% endhighlight %}

The callback method will receive the Commands response in the form on dictionary (key-value pairs):

{% highlight swift %}
  func handle_cmd_response(_ rsp:NSDictionary) {
    // extract the command response message
    let cr = rsp.object(forKey: "vehiclemessage") as! VehicleCommandResponse

{% endhighlight %}


<div class="page-header">
    <h2> TODO Synchronous Measurements</h2>
</div>

A pre-defined set of [simple vehicle
messages](https://github.com/openxc/openxc-message-format/blob/master/JSON.mkd#simple-vehicle-message){:target="_blank"},
the [official OpenXC
signals](https://github.com/openxc/openxc-message-format/tree/master#official-signals){:target="_blank"}
is also exposed in the Android library as higher level `Measurement` objects.
These work similarly to VehicleMessages but include more metadata and checks to
make sure the data is valid.

To query for a measurement synchronously, e.g. the speed of the vehicle, import
the com.openxc.measurements.VehicleSpeed. You'll also need to import the
necessary exceptions:

{% highlight java %}
import com.openxc.measurements.VehicleSpeed;
import com.openxc.measurements.UnrecognizedMeasurementTypeException;
import com.openxc.remote.VehicleServiceException;
{% endhighlight %}

You can then create a VehicleSpeed object and get the speed from the vehicle object.

{% highlight java %}
try {
    VehicleSpeed measurement = (VehicleSpeed) vehicle.get(VehicleSpeed.class);
} catch(NoValueException e) {
    Log.w(TAG, "The vehicle may not have made the measurement yet");
} catch(UnrecognizedMeasurementTypeException e) {
    Log.w(TAG, "The measurement type was not recognized");
}
{% endhighlight %}
If you want to access a different measurement, cast the measurement to any of the
available measurement objects in the API.

<div class="page-header">
    <h2> TODO Asynchronous Measurements</h2>
</div>

If you need to be kept up-to-date on any vehicle measurement, you can also
register with the service to be notified of updates.

{% highlight java %}
VehicleSpeed.Listener listener = new VehicleSpeed.Listener() {
    public void receive(Measurement measurement) {
        final VehicleSpeed speed = (VehicleSpeed) measurement;
        // do stuff with the measurement
    }
};
vehicle.addListener(VehicleSpeed.class, listener);
{% endhighlight %}

<div class="page-header">
    <h2>TODO Measurements</h2>
</div>

The parent Measurement class provides a standard interface for all measurements, starting
with a way to retrieve its value:

{% highlight java %}
VehicleSpeed measurement = vehicle.get(VehicleSpeed.class);
KilometersPerHour value = measurement.getValue();
{% endhighlight %}

Occasionally a measurement will not have been received from the vehicle
interface yet - it could be a malfunction, or you're just checking too early for
an infrequently updated measurement:

{% highlight java %}
try {
    VehicleSpeed measurement = vehicle.get(VehicleSpeed.class);
    // do stuff with it
} catch(NoValueException e) {
    Log.w(TAG, "The vehicle may not have made the measurement yet");
}
{% endhighlight %}

You can check the age of a measurement to determine how long ago the state was
actually reflected in the physical vehicle:

{% highlight java %}
if(measurement.getAge() < 10) {
    // only if age is less than 10 seconds
}
{% endhighlight %}

The range of every measurement is defined in the class, and can be queried
programmatically if you need to figure out the current value's relative
position:

{% highlight java %}
range = measurement.getRange();
int percentage = measurement.getValue().doubleValue() / range;
{% endhighlight %}

<div class="page-header">
    <h2>TODO Location</h2>
</div>

The Android framework includes built-in support for location information - most
devices support determining position based on CellID, GPS and Wi-Fi. OpenXC's
latitude, longitude and vehicle speed are exposed through this interface using a
vehicle location provider. This functionality is provided by Android primarily
for testing, but it's also a useful way to inject location data from sources
other than the built-in sensors. It works well with Bluetooth GPS receivers,
too.

If your app already uses the Android location framework, with a very small
change you can increase the accuracy by taking advantage of the GPS receiver
built into many vehicles (including the 2012 Ford Focus, even those without a
navigation system).

Add the `ACCESS_FINE_LOCATION` and `ACCESS_MOCK_LOCATION` permission to your
   app's `AndroidManifest.xml`:

{% highlight xml %}
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
{% endhighlight %}

Open a connection to the [VehicleManager][] as described earlier in "Service
Binding." Then access [user location][] in the traditional Android fashion -
data from the `LocationManager.GPS_PROVIDER` and
`VehicleManager.VEHICLE_LOCATION_PROVIDER` providers will be coming from OpenXC.
You may want to continue to use the `GPS_PROVIDER` so your app can support
switching from built-in GPS to the vehicle's receiver.

{% highlight java %}
locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
{% endhighlight %}

<div class="page-header">
    <h2 id="concepts"><a href="#concepts"> TODO Concepts</a></h2>
</div>

![OpenXC Android Library Data Flow](/images/android-library-dataflow.png)

**Data Flow**

Vehicle data is first received by a physical interface, e.g. USB (#1 in the
figure), in an Android process running the VehicleService. The data
processed and encapsulated in Java objects as a part of a
[DataPipeline](#pipeline) (#2) before being propagated to all client
applications (#3).

The client applications (in a separate process) receive the data in an instance
of the [VehicleManager](#services) service (#4) which notifies any activities
that have previously registered their interest in vehicle data (#5).

There are a few sequence diagrams available in the
[openxc-android docs directory](https://github.com/openxc/openxc-android/tree/master/docs/sequences){:target="_blank"}.

<h3 class="anchored" id="services">
  <a href="#services">Remote and Local Services</a>
</h3>

Android exposes many of its system level functions in the form of services. This
is a useful paradigm for long-running components of an application and perfect
for OpenXC, which needs to maintain a connection to the vehicle to continue
receiving new measurements.

Services can run either inside an application's address space or as an external
process; OpenXC uses both.

The core of the system is the [VehicleService][], which runs in a separate process
to any app. Since only one application at a time can connect to a USB device ,
this service controls access to the USB vehicle interface. From here, new data from
the vehicle (or other sources, as you'll see) is propagated to any
applications using the OpenXC library. The benefit is that multiple
OpenXC-enabled apps can run on the same system, simultaneously.

Application developers use a second, in-process service - the [VehicleManager][].
This service provides the interface that you'll use when developing your app.
Behind the scenes, it binds to the [VehicleService][] (running in another process)
and communicates with it using the [Android Interface Definition
Language][aidl]. The benefit of using the [VehicleManager][] in-process is that
developers don't need to care about any of this - it's all abstracted away.

<h3 class="anchored" id="pipeline">
<a href="#pipeline">Data Pipeline</a>
</h3>

The [VehicleManager][] uses the concept of a pipeline to funnel data from
"sources" to "sinks." This is a one-way pipeline.

*Source*

A data source injects new measurements into the OpenXC vehicle service. Sources
can be added by the internal vehicle service itself (e.g. the source that
connects to a USB device), the [Enabler][] (e.g. a Bluetooth device source) or
an app (e.g. the trace source, as in the [tutorial][]).

At whatever level you add the source, its data is made available to all other
OpenXC apps in the system. This is because even when a source is added to the
[VehicleManager][], it ferries incoming measurements back to the
[VehicleService][]. Client apps can create and add their own custom sources,
and when the client app is destroyed by Android the source will no longer send
any data.

<div class="alert alert-info">
The <a href="http://android.openxcplatform.com/reference/com/openxc/sources/ApplicationSource.html">
ApplicationSource</a> is a special case - it's the method by which data from an
app's custom source is propagated back to the
<a href="http://android.openxcplatform.com/reference/com/openxc/remote/VehicleService.html">VehicleService</a>
 and then all other apps.
</div>

Besides the VehicleInterface subclasses, there is one built-in source for
developers:

* [TraceVehicleDataSource][] - injects vehicle measurements from a pre-recorded
  [trace file][].

*Sink*

A data sink receives every new measurement put into the pipeline by the sources.
It receives the data in its base form, a `VehicleMessage`.

Data sinks handle the core of the library's asynchronous notification system,
too. The [VehicleManager][] always adds an instance of the
[MessageListenerSink][], which keeps tabs on which applications want to be
notified of changes in measurements.

The built-in sinks for application developers are:

* [FileRecorderSink][] - records all incoming vehicle measurements to a file on
  the internal storage that can later be used as a [trace file][].
* [UploaderSink][] - send all incoming vehicle measurements to a URL via HTTP.

*Remote Service*

The remote process [VehicleService][] also uses a pipeline, but it's not
accessible to application developers. The sources for this pipeline are the
active vehicle interface (e.g. Bluetooth, USB or Network) and:

* [ApplicationSource][] - this source has a special callback that the
  [VehicleManager][] instances in all OpenXC apps use to send any new measurements
  they create back to the [VehicleService][]. The purpose is that e.g. a trace
  data source or Bluetooth source instantiated in an application can share its
  data with all other apps in the system.

The VehicleService only uses two sinks:

* [RemoteCallbackSink][] - funnels vehicle data asynchronously with AIDL to
  applications.
* [VehicleLocationProvider][] - pushes location and speed information from the
  vehicle into the normal Android location framework.

Application developers don't need to worry about these, but it's good to know
how data flow through the system.

**Enabler**

The OpenXC Enabler app is primarily for convenience, but it also increases the
reliability of the system by handling background tasks on behalf of client
applications.

The Enabler provides a common location to control which data sources and sinks
are active, e.g. if the a trace file should be played back or recorded. It's
preferable to be able to change the data source on the fly, and not have to
programmatically load a trace file in any application under test.

With the enabler installed, the [VehicleService][] is also started automatically
when the Android device boots up. A simple data sink like a trace file uploader
can start immediately without any user interaction. This behavior probably isn't
desirable for a phone-based OpenXC system, but makes more sense when using a
tablet or other Android device that is permanently installed in the vehicle.

As a developer, you can also appreciate that because the enabler takes care of
starting the [VehicleService][], you don't need to add much to your
application's `AndroidManifest.xml` - just the [VehicleManager][] service.

[user location]: http://developer.android.com/guide/topics/location/strategies.html
[binding]: http://developer.android.com/guide/components/bound-services.html#Binding
[services]: http://developer.android.com/guide/components/services.html
[VehicleManager]: http://android.openxcplatform.com/reference/com/openxc/VehicleManager.html
[VehicleService]: http://android.openxcplatform.com/reference/com/openxc/remote/VehicleService.html
[VehicleSpeed]: http://android.openxcplatform.com/reference/com/openxc/measurements/VehicleSpeed.html
[Measurement]: http://android.openxcplatform.com/reference/com/openxc/measurements/Measurement.html
[Enabler]: /android/getting-started.html#enabler
[tutorial]: /android/tutorial.html
[aidl]: http://developer.android.com/guide/components/aidl.html
[trace file]: /android/testing.html
[BluetoothVehicleInterface]: http://android.openxcplatform.com/reference/com/openxc/interfaces/bluetooth/BluetoothVehicleInterface.html
[TraceVehicleDataSource]: http://android.openxcplatform.com/reference/com/openxc/sources/trace/TraceVehicleDataSource.html
[MessageListenerSink]: http://android.openxcplatform.com/reference/com/openxc/sinks/MessageListenerSink.html
[FileRecorderSink]: http://android.openxcplatform.com/reference/com/openxc/sinks/FileRecorderSink.html
[UploaderSink]: http://android.openxcplatform.com/reference/com/openxc/sinks/UploaderSink.html
[ApplicationSource]: http://android.openxcplatform.com/reference/com/openxc/sources/ApplicationSource.html
[UsbVehicleInterface]: http://android.openxcplatform.com/reference/com/openxc/interfaces/usb/UsbVehicleInterface.html
[RemoteCallbackSink]: http://android.openxcplatform.com/reference/com/openxc/sinks/RemoteCallbackSink.html
[VehicleLocationProvider]: http://android.openxcplatform.com/reference/com/openxc/VehicleLocationProvider.html

[ios-framework-source]: https://github.com/openxc/openxc-ios-framework
[demo app]:https://github.com/openxc/openxc-ios-app-demo
