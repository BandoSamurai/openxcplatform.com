---
layout: developer
title: App Tutorial - OpenXC
---

<div class="page-header">
    <h1>App Tutorial</h1>
</div>

This tutorial assumes you have a working knowledge of how to create an Android
application. It isn't meant for copy and pasting into your editor - some sections
will require additional exception handling or changes to match your exact code.
Setting up the development environment and understanding Android fundamentals is
outside the scope of OpenXC, and already Google provides great documentation and
tutorials - we won't repeat them here. The best place to start is [Google's SDK guide][sdk].

Once you're comfortable with creating an Android app, continue on with this
tutorial to enrich it with data from your vehicle. At this point, you should
have the OpenXC library
[setup into your development environment][library project] and the `MyFirstApp`
project from Google's tutorial. Instead of "Hello World", you're going to display
the current vehicle speed.

<div class="alert alert-error"> We'll mention this again at the end of the
tutorial, but you will need to install the
<a href="/android/library-installation.html#enabler">Enabler</a> app
before your application will work.</div>

<div class="page-header">
<h2>Using the Library</h2>
</div>

You must tell Android and Eclipse that your app intends to use the OpenXC
library. In the Package Explorer in the left hand side of the Eclipse window,
right click on your project's top-level folder (e.g. `MyFirstApp`) and select
`Properties`.

Select the `Android` option in the list on the left in the `Properties` window.
There should now be a `Library` section on the right side. Click the `Add`
button, and add the `openxc` project. It should now show up in the Library list
with a green check mark.

<div class="page-header">
<h2>Android Manifest</h2>
</div>

The OpenXC library is exposed to applications through an
[Android Service][], the [VehicleManager][]. To use it, you will first need to
define the service in your app's `AndroidManifest.xml`. Add this `<service>` tag
to your app's `AndroidManifest.xml`:

{% highlight xml %}
<application>
    ...
    <service android:name="com.openxc.VehicleManager"/>
    ...
</application>
{% endhighlight %}


<div class="page-header">
<h2>VehicleManager Service</h2>
</div>

You must first [bind][] with the [VehicleManager][] Service before you can receive
any vehicle data.

To start, import the VehicleManager class from the OpenXC library.

{% highlight java %}
import com.openxc.VehicleManager;
{% endhighlight %}

<sub>**Note**: If you're ever missing an include, you can over over the errored code and
select to import the necessary class. You can also use Ctrl + Shift + O to import
any missing classes (Cmd + Shift + O on Mac).</sub>

Next, add a [ServiceConnection][] to your activity, where it will be executed at object creation time. You'll use this to store a
connection to the OpenXC service.



{% highlight java %}
...
private VehicleManager mVehicleManager;
private boolean mBound = false;

private ServiceConnection mConnection = new ServiceConnection() {
    // Called when the connection with the service is established
    public void onServiceConnected(ComponentName className,
            IBinder service) {
        Log.i("openxc", "Bound to VehicleManager");
        mVehicleManager = ((VehicleManager.VehicleBinder)service).getService();
    }

    // Called when the connection with the service disconnects unexpectedly
    public void onServiceDisconnected(ComponentName className) {
        Log.w("openxc", "VehicleService disconnected unexpectedly");
        mVehicleManager = null;
        mBound = false;
    }
};
{% endhighlight %}

In the `onStart()` method of your activity, request to bind with the service
with your new ServiceConnection instance:

{% highlight java %}
protected void onStart()) {
    super.onStart();

    ...
    Intent intent = new Intent(this, VehicleManager.class);
    if (!mBound)
         mBound = bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
}
{% endhighlight %}

To make sure you don't leak memory, unbind from the service when your activity
pauses:

{% highlight java %}
public void onPause() {
    super.onPause();
    Log.i("openxc", "Unbinding from vehicle service");
    unbindService(mConnection);
    mBound = false;
}
{% endhighlight %}

And what you undo on Pause, you have to make sure is done by the time onResume is called, so:

{% highlight java %}
public void onResume() {
    super.onResume();
    if (!mBound) {
        Intent intent = new Intent(this, VehicleManager.class);
        mBound = bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
        if (mBound)
            Log.i("openxc", "Binding to Vehicle Manager");
        else
            Log.e("openxc", "Failed to bind to Vehicle Manager");
    }
}
{% endhighlight %}

Now, when your app starts it will also start the OpenXC [VehicleManager][] and if
the [Enabler][enabler] is running, it will be ready to receive data from the
vehicle.

<div class="page-header">
<h2>Asynchronous Updates</h2>
</div>

Your activity now has a connection to the vehicle service, and you want to be
notified whenever the speed of the vehicle changes.

First, import the Measurement and VehicleSpeed class from the measurements package, as well as the
required exception classes.

{% highlight java %}

import com.openxc.measurements.VehicleSpeed;
import com.openxc.measurements.Measurement;
import com.openxc.measurements.UnrecognizedMeasurementTypeException;
import com.openxc.remote.VehicleServiceException;
{% endhighlight %}

Then add a [VehicleSpeed.Listener][Listener] instance to your activity:

{% highlight java %}
VehicleSpeed.Listener mSpeedListener = new VehicleSpeed.Listener() {
    public void receive(Measurement measurement) {
        // do stuff with the measurement
    }
};
{% endhighlight %}

In the `ServiceConnection.onServiceConnected()` method you defined just a moment
ago, register this new `Listener` with the [VehicleManager][].

{% highlight java %}
public void onServiceConnected(ComponentName className, IBinder service) {
    ...
    try {
    mVehicleManager.addListener(VehicleSpeed.class, mSpeedListener);
    } catch (VehicleServiceException e) {
        e.printStackTrace();
    } catch (UnrecognizedMeasurementTypeException e){
        e.printStackTrace();
    }
    ...
}
{% endhighlight %}

Now, every time a new value for [VehicleSpeed][] is received by the
[VehicleManager][], the `receive(Measurement)` method of the new [Listener][]
will be called with the data.

<div class="page-header">
<h2>Measurement Data</h2>
</div>

You want to actually do something with the vehicle speed when you receive it.
Add a new [TextView][] to the file `res/layout/activity_main.xml` for the speed
and add an `id` attribute to the exiting "hello world" `TextView`:

{% highlight xml %}
<TextView
    android:id="@+id/textView1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" />
<TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_below="@+id/textView1"
    android:id="@+id/vehicle_speed" />
{% endhighlight %}

Grab a reference to that text object in your activity's `onCreate()`:

{% highlight java %}
private TextView mVehicleSpeedView;
public void onCreate(Bundle savedInstanceState) {
    ...
    mVehicleSpeedView = (TextView) findViewById(R.id.vehicle_speed);
}
{% endhighlight %}

Replace your `Listener.receive(Measurement)` method with this
one:

{% highlight java %}
public void receive(Measurement measurement) {
    final VehicleSpeed speed = (VehicleSpeed) measurement;
    MainActivity.this.runOnUiThread(new Runnable() {
        public void run() {
            mVehicleSpeedView.setText(
                "Vehicle speed (km/h): " + speed.getValue().doubleValue());
        }
    });
}
{% endhighlight %}

The text view will be updated every time the vehicle speed changes and display
the latest value.

That's all you need to do to get measurements from OpenXC. You can see the full
list of `Measurement` Java classes that you can use in the
[library documentation][].

<div class="page-header">
<h2>Completed Example</h2>
</div>

If you're having trouble or want to double check your work, check out a completed Eclipse project [here](https://github.com/openxc/openxc-starter).

Your Android device likely doesn't have any vehicle data flowing through it yet.
The next step is to use a pre-recorded vehicle trace file to simulate a real
vehicle interface on your desk.

Download the [driving trace][] and copy it to the SD card of your Android
device. You can do this in one of three ways:

* Mount the Android device as USB disk.
* Use the File Manager from the Android Device Monitor (included with the
  Android SDK).
* Copy the file with `abd` on the command line:
    `$ adb push driving.json /sdcard/openxc-driving.json`

Install the [Enabler][enabler] app if you haven't already. That application
helps control the source of vehicle data, e.g. a vehicle interface or a trace
file.

Install a file manager in Android like the [OI File
Manager](https://play.google.com/store/apps/details?id=org.openintents.filemanager)
so the Enabler is able to browse for files on the SD card.

To install a file manager on an Android Emulator, download the APK file from the
[product web site](http://openintents.org/en/filemanager), start the emulator,
and from the command line install the APK file with adb:
<pre><code>$ adb install FileManager-2.0.2.apk</code></pre>

Finally, run the `OpenXC Enabler` app on the device and go to `Settings -> Data
Sources -> Trace File Playback`, check the `Playback trace file` option and
browse for the trace file you copied over.

Run the "Hello OpenXC" app and you should see the vehicle speed changing in the
UI! If you'd like to see a more in-depth example, take look at the [MPG][] app
or the [Vehicle Dashboard][].

<div class="page-header">
<h2>Next Steps</h2>
</div>

You've now completed the OpenXC Android tutorial, but there's more to learn
about supported [Android devices][Android devices] and [vehicle interfaces][]. You can
also check out the [Android API Guide][Android API Guide] for more information on
how to use the API. If you are having trouble, check out the
[troubleshooting](/android/troubleshooting.html) steps.


[sdk]: http://developer.android.com/sdk/index.html
[gg]: http://groups.google.com/group/openxc
[vehicle interfaces]: /vehicle-interface/hardware.html
[Android devices]: /android/hardware.html
[library project]: /android/library-installation.html
[Vehicle Dashboard]: https://github.com/openxc/openxc-android/tree/master/examples
[MPG]: https://github.com/openxc/mpg
[Android service]: http://developer.android.com/guide/components/services.html
[bind]: http://developer.android.com/guide/topics/fundamentals/bound-services.html#Binding)
[VehicleManager]: http://android.openxcplatform.com/reference/com/openxc/VehicleManager.html
[enabler]:/android/library-installation.html#enabler
[driving trace]: https://s3.amazonaws.com/openxcplatform.com/driving.json
[library documentation]: http://android.openxcplatform.com/reference/com/openxc/measurements/package-summary.html
[ServiceConnection]: http://developer.android.com/reference/android/content/ServiceConnection.html
[Listener]: http://android.openxcplatform.com/reference/com/openxc/measurements/Measurement.Listener.html
[VehicleSpeed]: http://android.openxcplatform.com/reference/com/openxc/measurements/VehicleSpeed.html
[TextView]: http://developer.android.com/reference/android/widget/TextView.html
[Android API Guide]: /android/api-guide.html
