---
layout: developer
title: App Tutorial - OpenXC
redirect_from: /getting-started/tutorial.html
---

<div class="page-header">
    <h1>App Tutorial</h1>
</div>

This tutorial assumes you have a working knowledge of how to create an Android
application. Setting up the development environment and understanding Android
fundamentals is outside the scope of OpenXC, and already Google provides great
documentation and tutorials - we won't repeat them here. The best place to start
is [Google's SDK guide][sdk].

Once you're comfortable with creating an Android app, continue on with this
tutorial to enrich it with data from your vehicle. At this point, you should
have the OpenXC library
[setup into your development environment][library project].

<div class="alert alert-danger"> We'll mention this again at the end of the
tutorial, but you will need to install the
<a href="/android/library-installation.html#enabler">Enabler</a> app
before your application will work.</div>

<div class="page-header">
<h2>Starter Application</h2>
</div>

1. Download the [complete starter
   application](https://github.com/openxc/openxc-starter) from GitHub (click the
   "ZIP" button on the right hand column or use Git), and extract it to your
   code workspace.
1. Just as with the OpenXC Android library, import the project into Eclipse - go
   to `File -> Import -> Android -> Existing Android Code Into Workspace`.
   Browse to the `openxc-starter` folder and select the project it detects
   called `StarterActivity`.
1. This project is ready to go, so if you want to quickly see something running
   jump ahead to the [testing section](#testing). To know more about how this
   application works, continue reading.

<div class="page-header">
<h2>Using the Library</h2>
</div>

The Starter project is based off of the same "Hello World" application that you
should have already created in Google's tutorial. The first difference is that
we've specified that the Starter app will use the OpenXC library as a
dependency.

This is already done in the Starter project, but to do this in your own app go
to the Package Explorer in the left hand side of the Eclipse window, right click
on the project's top-level folder (e.g. `MyFirstApp`) and select `Properties`.

Select the `Android` option in the list on the left in the `Properties` window.
There should now be a `Library` section on the right side. Click the `Add`
button, and add the `openxc` project. It should now show up in the Library list
with a green check mark.

Next, open the `libs` folder in your project and delete the file
`android-support-v4.jar` if one exists - there's already a version of this in
the OpenXC library and they will conflict.

<div class="page-header">
<h2>Android Manifest</h2>
</div>

The `AndroidManifest.xml` is the core of every Android application - it tells
the Android OS what views are available, which servies and used and what sensors
your app needs.

Every OpenXC application, the Starter app included, needs to use the
`VehicleManager` service. The next difference between the "Hello World" app and
the Starter app is the addition of this line to the manifest:

{% highlight xml %}
<service android:name="com.openxc.VehicleManager"/>
{% endhighlight %}

This should go between the `<application>` tags, like this:

{% highlight xml %}
<application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme" >
    <activity
        android:name="com.openxc.openxcstarter.StarterActivity"
        android:label="@string/app_name" >
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>

    <service android:name="com.openxc.VehicleManager"/>
</application>
{% endhighlight %}

<div class="page-header">
<h2>VehicleManager Service</h2>
</div>

The next changes are all in Java code - for the Starter app, it's in
`StarterActivity.java` in the `src` folder. In order to use the `VehicleManager`
in Java code, we have to bind with it when the application starts.

Look for the ServiceConnection in the `StarterActivity`, alon

{% highlight java %}
    private ServiceConnection mConnection = new ServiceConnection() {
        // Called when the connection with the VehicleManager service is established, i.e. bound.
        public void onServiceConnected(ComponentName className, IBinder service) {
            Log.i("openxc", "Bound to VehicleManager");
            // When the VehicleManager starts up, we store a reference to it
            // here in "mVehicleManager" so we can call functions on it
            // elsewhere in our code.
            mVehicleManager = ((VehicleManager.VehicleBinder) service)
                    .getService();

            // We want to receive updates whenever the EngineSpeed changes. We
            // have an EngineSpeed.Listener (see above, mSpeedListener) and here
            // we request that the VehicleManager call its receive() method
            // whenever the EngineSpeed changes
            try {
                mVehicleManager.addListener(EngineSpeed.class, mSpeedListener);
            } catch (VehicleServiceException e) {
                e.printStackTrace();
            } catch (UnrecognizedMeasurementTypeException e) {
                e.printStackTrace();
            }
        }

        // Called when the connection with the service disconnects unexpectedly
        public void onServiceDisconnected(ComponentName className) {
            Log.w("openxc", "VehicleManager Service  disconnected unexpectedly");
            mVehicleManager = null;
        }
    };
{% endhighlight %}

In the `onResume()` method of the activity, we request to bind with the service
using the new ServiceConnection instance:

{% highlight java %}
@Override
public void onResume() {
    super.onResume();
    // When the activity starts up or returns from the background,
    // re-connect to the VehicleManager so we can receive updates.
    if(mVehicleManager == null) {
        Intent intent = new Intent(this, VehicleManager.class);
        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
    }
}
{% endhighlight %}

Now, when your app starts it will also start the OpenXC VehicleManager and if
the [Enabler][enabler] is running, it will be ready to receive data from the
vehicle.

<div class="page-header">
<h2>Asynchronous Updates</h2>
</div>

The activity now has a connection to the vehicle service, and we want it to be
notified whenever the speed of the vehicle changes. Look for the
`EnginerSpeed.Listener` object in the `StarterActivity`:

{% highlight java %}
EngineSpeed.Listener mSpeedListener = new EngineSpeed.Listener() {
    public void receive(Measurement measurement) {
        // When we receive a new EngineSpeed value from the car, we want to
        // update the UI to display the new value. First we cast the generic
        // Measurement back to the type we know it to be, an EngineSpeed.
        final EngineSpeed speed = (EngineSpeed) measurement;
        // In order to modify the UI, we have to make sure the code is
        // running on the "UI thread" - Google around for this, it's an
        // important concept in Android.
        StarterActivity.this.runOnUiThread(new Runnable() {
            public void run() {
                // Finally, we've got a new value and we're running on the
                // UI thread - we set the text of the EngineSpeed view to
                // the latest value
                mEngineSpeedView.setText("Vehicle speed (km/h): "
                        + speed.getValue().doubleValue());
            }
        });
    }
};
{% endhighlight %}

This `mSpeedListener` is referred to from
`ServiceConnection.onServiceConnected()` method we previously, where it's handed
to the `VehicleManager` for future updates. Every time a new value for
`EngineSpeed` is received by the `VehicleManager`, the `receive(Measurement)`
method of the new `Listener` will be called with the data.

<div class="page-header">
<h2>Measurement Data</h2>
</div>

Lastly, the Starter app adds one more element to the user interface so there's a
place to display the current speed. In the main layout file for the activity,
`res/layout/activity_starter.xml`, the existing "hello world" `TextView` is
replaced with these two:

{% highlight xml %}
<TextView
    android:id="@+id/textView1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" />
<TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_below="@+id/textView1"
    android:id="@+id/vehicle_speed" />
{% endhighlight %}

These widgets have IDs and are using the `RelativeLayout` to make sure they
don't print on top of each other.

In the app's `onCreate` method, we grab a reference to that text object in Java
as `mEngineSpeedView`:

{% highlight java %}
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_starter);
    // grab a reference to the engine speed text object in the UI, so we can
    // manipulate its value later from Java code
    mEngineSpeedView = (TextView) findViewById(R.id.vehicle_speed);
}
{% endhighlight %}

Finally, look back at the EngineSpeed.Listener we created before - it's
updated the UI every time a new measurement arrives:

{% highlight java %}
EngineSpeed.Listener mSpeedListener = new EngineSpeed.Listener() {
    public void receive(Measurement measurement) {
        // When we receive a new EngineSpeed value from the car, we want to
        // update the UI to display the new value. First we cast the generic
        // Measurement back to the type we know it to be, an EngineSpeed.
        final EngineSpeed speed = (EngineSpeed) measurement;
        // In order to modify the UI, we have to make sure the code is
        // running on the "UI thread" - Google around for this, it's an
        // important concept in Android.
        StarterActivity.this.runOnUiThread(new Runnable() {
            public void run() {
                // Finally, we've got a new value and we're running on the
                // UI thread - we set the text of the EngineSpeed view to
                // the latest value
                mEngineSpeedView.setText("Vehicle speed (km/h): "
                        + speed.getValue().doubleValue());
            }
        });
    }
};
{% endhighlight %}

That's all you need to do to get measurements from OpenXC. You can see the full
list of `Measurement` Java classes that you can use in the
[library documentation][].

<div class="page-header">
<h2 id="testing">Testing</h2>
</div>

Your Android device likely doesn't have any vehicle data flowing through it yet.
The next step is to use a pre-recorded vehicle trace file to simulate a real
vehicle interface on your desk.

Install the [Enabler][enabler] app if you haven't already. That application
helps control the source of vehicle data, e.g. a vehicle interface or a trace
file. If you have the OpenXcEnablerActivity project imported into Eclipse, this
is as simple as `Run As -> Android Application` for that project.

Download the [driving trace][] and copy it to the SD card of your Android
device. You can do this in a few ways:

* Mount the Android device as USB disk.
* Use the File Manager from the Android Device Monitor (included with the
  Android SDK).
* Copy the file with `abd` on the command line:
    `$ adb push driving.json /sdcard/openxc-driving.json`
* Download the file directly onto the device using the built-in browser

Install a file manager in Android like the [OI File
Manager](https://play.google.com/store/apps/details?id=org.openintents.filemanager)
so the Enabler is able to browse for files on the SD card.

To install a file manager on an Android Emulator, browse to the [OI File Manager
site](http://openintents.org/en/filemanager) on the built-in Android browser and
download the APK file. When the download is complete, click the file in the
notification bar to install the app. Alternatively, if you have `adb` working at
the command line just run: <pre><code>$ adb install FileManager-2.0.2.apk</code></pre>

Finally, the last steps:

1. Run the `OpenXC Enabler` app on the device
1. In the Enabler, Go to `Settings -> Data Sources -> Trace File Playback`,
   check the `Playback trace file` option
1. Below that, select `Trace file`, select the File Manager as the application
   to open, brows for the trace file you copied earlier and click `Pick File`
1. Return to the front view of the Enabler - the message count should be
   increasing, indicating the trace is playing.

Run the Starter app app and you should see the engine speed changing in the
UI! If you'd like to see a more in-depth example, take look at the [Vehicle
Dashboard][].

<div class="page-header">
<h2>Next Steps</h2>
</div>

You've now completed the OpenXC Android tutorial, but there's more to learn
about supported [Android devices][Android devices] and [vehicle interfaces][]. You can
also check out the [Android API Guide][Android API Guide] for more information on
how to use the API. If you are having trouble, check out the
[troubleshooting](/android/troubleshooting.html) steps.

[sdk]: http://developer.android.com/sdk/index.html
[vehicle interfaces]: /vehicle-interface/hardware.html
[Android devices]: /android/hardware.html
[library project]: /android/library-installation.html
[enabler]:/android/library-installation.html#enabler
[driving trace]: https://s3.amazonaws.com/openxcplatform.com/driving.json
[library documentation]: http://android.openxcplatform.com/reference/com/openxc/measurements/package-summary.html
[Android API Guide]: /android/api-guide.html
