---
layout: default
---

Android Library Installation
=============

The OpenXC functionality is exposed via a Java library that includes some
Android services your application can use, and it is compiled and package with
your own code; there is no no OpenXC app to install.

The library is available on GitHub in the [openxc-android][] repository. Right
now, the code is only available if you have access to the early release and are
logged into GitHub.

[openxc-android]: https://github.com/openxc/openxc-android

## Installation

This project declares dependencies with Maven - you can choose to develop with
OpenXC via Eclipse, the command line, or both ways simultaneously.

### Using Eclipse

* Install [Eclipse](http://www.eclipse.org/downloads/) Indigo or later for Java
  Developers. Other versions do not install Maven, which is required. I don't
  recommend using the version of Eclipse in the Ubuntu repositories - download
  it manually.
    * If you already have a version of Eclipse installed besides the one for
      "Java Developers" you can install the
      [m2eclipse plugin](http://www.eclipse.org/m2e/download/) separately.
* Install the [Android SDK and ADT plugin for Eclipse](http://developer.android.com/sdk/installing.html)
  from Google. You'll need to install API version 12.
* If you are running the 64 bit version of the SDK you will need to open a
  terminal and run "sudo apt-get install ia32-libs"
* Clone the [openxc-android][] repo (this repo). Right now, the code is only
  available to developers in the early preview.
* Open Eclipse and go to `File -> Import -> Maven -> Existing Maven Projects`.
  Browse to where you cloned the repository and import the `openxc` project.

![Importing a Maven Project in Eclipse](/images/screenshots/eclipse-import-maven.png)

* You will be prompted to install the m2e-android connector - do that, then
  restart Eclipse. If you are not prompted to install the connector you may need
  to wait until after the project builds. Find the pom.xml related error, right
  click on it and choose "quick fix" to install the connector.
* Right click on the `openxc` project, go to Maven -> Update Project
  Configuration. Select the `openxc` project in the dialog and click OK. Let
  Eclipse try to build the project (look in the bottom right for a status bar).
  There may still be errors in the build at this point.

![Changing the Project Dependencies](/images/screenshots/eclipse-project-dependency.png)

* Right click on your project and go to `Properties -> Android`.
    In the "Library" section add a reference to the `openxc` project.

![Updating the Maven project config](/images/screenshots/eclipse-update-maven.png)

* If there are still errors in the build, Maven might have had trouble
  downloading the dependencies. If you use an Internet proxy, you will need to
  configure the [proxy settings](http://maven.apache.org/guides/mini/guide-proxies.html).
  Otherwise, try asking in the [Google Group](/discuss.html) for some help.
* There should be no changes in the `openxc-android` repository at this point
  (`git status` should report nothing) and there should be no errors in Eclipse.
* Start a new Android project for your application if you haven't already.

![Clean working directory](/images/screenshots/git-status.png)

### Using the Command Line

If you prefer to compile and deploy from the command line, you can use Maven
without Eclipse.

You'll need to install the command-line version of Maven (and not just use the
Maven built-in to Eclipse). Make sure you install Maven 3.0.4 or later - it's
just a Java program, so as long as you have a working JRE, "installing" Maven
just means extracting the .zip file somewhere in your shell's `PATH` and running
the `mvn` executable.

* Install [Maven](http://maven.apache.org/) - it's just a Java application, so
  "installation" can be as simple as extracting the download and making sure the
  `mvn` executable is somewhere on your shell's `PATH`.
* Follow the instructions in the "Android SDK and Maven" section of this
  document to install the latest version of the Android SDK for Maven
* Clone the [openxc-android][] repo (this repo). Right now, the code is only
  available to developers in the early preview.
* Run `mvn install -p openxc` from the `openxc` directory to package and install
  the `openxc` library to your local Maven repository.
* Start a new Android project if you haven't already (check out the
  `example/pom.xml` if you're unfamiliar with setting up a Maven project) and
  make sure the `openxc` dependency is declared like so:

    <dependencies>
        <dependency>
            <groupId>com.openxc</groupId>
            <artifactId>openxc</artifactId>
            <version>1.1</version>
            <type>apklib</type>
        </dependency>
    </dependencies>

[openxc-android]: https://github.com/openxc/openxc-android

### Android Manifest

The OpenXC service must be defined in your application's `AndroidManifest.xml`
before using it. Add this `<service>` tag to your app:

    <application>
        ...
        <service android:name="com.openxc.VehicleManager"/>
        ...
    </application>

### Enabler

The best way to make the USB vehicle interface available to your app is to
install the **OpenXC Enabler** app - this is in the `openxc-android` source, but
we've also made it available as an APK in the [downloads][] section. This app
starts the vehicle service at boot and makes sure it stays alive - this way,
your app doesn't have to worry about USB permissions or reacting to device
detachment/reattachment.

After you install the app, it's important that you launch it once manually from
the app drawer, otherwise the service will not automatically start at boot.

If you don't want to use the enabler app, it's certainly possible to start the
service from your application directly. Look at the [source for the
enabler][enabler] to see exactly how to accomplish that.

[downloads]: https://github.com/openxc/openxc-android/downloads
[enabler]: https://github.com/openxc/openxc-android/tree/master/enabler
