---
layout: default
title: Testing - OpenXC
---

<div class="page-header">
    <h1>Testing</h1>
</div>

Before you can test your app in a vehicle, you will need to find or build a
functional [vehicle interface][]. Ford is currently providing a limited number
of kits with OpenXC signals defined for the 2012 Ford Focus. Join the project's
[Google Group][gg] to find out how to get one of these.

<div class="page-header">
    <h2>Simulated Vehicle Data</h2>
</div>

The library ships with a method for playing back previously recorded vehicle
measurement trace files for testing. The [Measurement][] objects received
by your application are identical to those received from a live vehicle.

The trace file format is simply a plain text file of OpenXC JSON messages with
an additional timestamp field, separated by newlines:

    {"timestamp": 1351176963.426318, "name": "door_status", "value": "passenger", "event": true}
    {"timestamp": 1351176963.438087, "name": "fine_odometer_since_restart", "value": 0.0}
    {"timestamp": 1351176963.438211, "name": "brake_pedal_status", "value": false}
    {"timestamp": 1351176963.438318, "name": "transmission_gear_position", "value": "second"}

In fact, this is the same method used by some of the instrumentation tests. Once
you've created a file either by recording the output of the vehicle interface
module or building one by hand, copy it to your Android device's internal
storage or SD card. You can do this in one of three ways:

* Mount the Android device as USB disk.
* Use the File Manager from the Android Device Monitor (included with the
  Android SDK).
* Copy the file with `abd` on the command line:
	`$ adb push driving.json /sdcard/openxc-driving.json`

Install the [Enabler][enabler] app if you haven't already. That application
helps control the source of vehicle data, e.g. a USB vehicle interface or a
trace file.

Install a file manager in Android like the [OI File
Manager](https://play.google.com/store/apps/details?id=org.openintents.filemanager)
so the Enabler is able to browse for files on the SD card.

Finally, run the `OpenXC Enabler` app on the device and go to `Settings -> Data
Sources -> Trace File Playback`, check the `Playback trace file` option and
browse for the trace file you copied over.

<div class="page-header">
    <h2 id="traces"><a href="#traces">Vehicle Trace Files</a></h2>
</div>

There are a number of trace files available that exhibit different scenarios and
driving behaviors.

These files are delivered as gzip compressed files, so if you download one and
it seems to be corrupted binary, try again using an updated browser - it should
auto-detect an uncompress when you download:

* [NYC - Downtown, Crosstown](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/downtown-crosstown.json)
* [NYC - East Downtown](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/downtown-east.json)
* [NYC - West Downtown](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/downtown-west2.json)
* [NYC - West Downtown 2](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/downtown-west.json)
* [NYC - Uptown Crosstown](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/uptown-crossdown.json)
* [NYC - Uptown Crosstown 2](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/uptown-crosstown.json)
* [NYC - West Uptown ](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/uptown-west2.json)
* [NYC - West Uptown](http://openxcplatform.com.s3.amazonaws.com/traces/nyc/uptown-west.json)
* [Highway Commute and Local Stop](http://openxcplatform.com.s3.amazonaws.com/traces/localwithgps.json)
* [Idling while parked][idling while parked], toggling headlights, parking brake, etc.
* [Short drive][short drive] around the block at low speed (~25MPH average)
* [Idling for longer period of time][idling2]
* [Highway commute][], about 40 minutes one way
* [Tailgating][]
* [Riding the brakes][]
* [Speeding at highway speeds][speeding]
* [Agressive driving][], hard acceleration and braking

<div class="page-header">
    <h2>Button Events</h2>
</div>

Unfortunately the Android emulator does not allow us to send arbitrary events
from button presses without editing the source. In order to test your button
event handlers, the recommended method is to write them in such a way that they
can accept either VehicleButtonEvents or regular Android key events as input.
You may want a flag to disable the Android key events when running in
production.

For example, the OpenXC specification includes a signal for a D-pad style
controller. The 2012 Ford Focus has such a controller on the steering wheel.
The Android emulator will send `KEYCODE_DPAD_*`
[KeyEvents](http://developer.android.com/reference/android/view/KeyEvent.html)
when you press the arrows on your computer's num pad. These are a good parallel
and it should be simple to have your event handlers watch for *either* the
vehicle D-pad event or the Android event.

Here's an example - if you want your application to send a text message when the
user presses the down button on the steering wheel, write a function that
performs the action:

{% highlight java %}
public void sendTextMessage() {
    // send a text message
    ...
}
{% endhighlight %}

To hook this up to Android `KeyEvent`, define an `onKey` method in your
activity:

{% highlight java %}
@Override
public boolean onKeyDown(int i, KeyEvent event) {
    if (i == KeyEvent.KEYCODE_DPAD_DOWN) {
        sendTextMessage();
        return true;
    }
    super.onKeyDown(i, event);
    return true;
}
{% endhighlight %}

This connects your functionality to the virtual button in the Android emulator.
To have this actually work in the car, you need to register a handler for the
VehicleButtonEvent.

{% highlight java %}
VehicleButtonEvent.Listener listener = new VehicleButtonEvent.Listener() {
    public void receive(VehicleMeasurement measurement) {
        final VehicleButtonEvent event (VehicleButtonEvent) measurement;
        if(event.getAction() ==
                    VehicleButtonEvent.ButtonAction.PRESSED,
                && event.getValue() ==
                    VehicleButtonEvent.ButtonId.DOWN) {
            sendTextMessage();
        }
    }
}
{% endhighlight %}

[gg]: http://groups.google.com/group/openxc
[Enabler]: http://openxcplatform.com/getting-started/library-installation.html#enabler
[vehicle interface]: http://openxcplatform.com/vehicle-interface/index.html
[short drive]: https://s3.amazonaws.com/openxcplatform.com/driving.json
[idling while parked]: https://s3.amazonaws.com/openxcplatform.com/parked.json
[idling2]: https://s3.amazonaws.com/openxcplatform.com/traces/idling.json
[Highway commute]: https://s3.amazonaws.com/openxcplatform.com/traces/commute.json
[Tailgating]: https://s3.amazonaws.com/openxcplatform.com/traces/tailgating.json
[Riding the brakes]: https://s3.amazonaws.com/openxcplatform.com/traces/riding-brakes.json
[speeding]: https://s3.amazonaws.com/openxcplatform.com/traces/highway-speeding.json
[Agressive driving]:https://s3.amazonaws.com/openxcplatform.com/traces/aggressive-driving.json
[Measurement]: http://android.openxcplatform.com/reference/com/openxc/measurements/Measurement.html
[VehicleManager]: http://android.openxcplatform.com/reference/com/openxc/VehicleManager.html
