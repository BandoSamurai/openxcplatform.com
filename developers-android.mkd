---
layout: default
permalink: /developers/android.html
---

Android Host & Library
=============

OpenXC applications are standard Android applications that use the OpenXC
library in conjunction with a vehicle interface module connected to a USB port.

## Android Hardware

There are only a few requirements for the Android hardware, or what we call the
host device:

* It must support **Android 3.1** or greater (i.e. API level 12 or greater)
* It must have support **USB host mode** and provide a way to plug in a USB
  device - this does *not* mean the standard micro-USB port you use for
  debugging or copying files to the SD card. Some tablets offer a full-size
  USB port and others offer a dongle that exposes one.

An Android device that is known to work well with OpenXC is the [Toshiba
Thrive][thrive] - it's a relatively inexpensive Android tablet running 3.2
Honeycomb and includes a full-size USB port. A device with 3G connectivity can
make building web-enabled applications easier, but a 3G -> WiFi microcell can
get aroudn this limitation quite easily (see the [FAQ](/developers/faq.html) for
more details).

[thrive]: http://us.toshiba.com/tablets/thrive/10-inch/

## OpenXC Library

The OpenXC functionality is exposed via a Java library that includes some
Android services your application can use, and it is compiled and package with
your own code; there is no no OpenXC app to install.

The library is available on GitHub in the [openxc-android][] repository.

[openxc-android]: https://github.com/openxc/openxc-android

## Installation

This project declares dependencies with Maven - you can choose to use the
project via Eclipse, via the command line, or both ways simultaneously.

### Using Eclipse

* Install [Eclipse](http://www.eclipse.org/downloads/) Indigo or later for Java
  Developers. Other versions do not install Maven, which is required.
* Install the [Android SDK](http://developer.android.com/sdk/index.html) and
  then the [ADT plugin](http://developer.android.com/sdk/eclipse-adt.html)
  from Google.
* Clone the [openxc-android][] repo (this repo).
* Open Eclipse and go to `File -> Import -> Maven -> Existing Maven Projects`.
  Browse to where you cloned the repository and import the `openxc` project.
* You will be prompted to install the m2e-android connector - do that, then
  restart Eclipse.
* Right click on the `openxc` project, go to Maven -> Update Project
  Configuration. Select the `openxc` project in the dialog and click OK.
* Start a new Android project for your application if you haven't already.
* Right click on your project and go to `Build Path -> Configure Build Path`.
    Click the `Projects` tab and add a reference to the `openxc` project.
* There should be no changes in the repository at this point (`git status`
  should report nothing) and there should be no errors in Eclipse.


### Using the Command Line

If you prefer to compile and deploy from the command line, you can use Maven
without Eclipse.

* Install [Maven](http://maven.apache.org/) - it's just a Java application, so
  "installation" can be as simple as extracting the download and making sure the
  `mvn` executable is somewhere on your shell's `PATH`.
* Follow the instructions in the "Android SDK and Maven" section of this
  document to install the latest version of the Android SDK for Maven
* Clone the [openxc-android][] repo (this repo).
* Run `mvn install -p openxc` from the `openxc` directory to package and install
  the `openxc` library to your local Maven repository.
* Start a new Android project if you haven't already (check out the
  `example/pom.xml` if you're unfamiliar with setting up a Maven project) and
  make sure the `openxc` dependency is declared like so:

    <dependencies>
        <dependency>
            <groupId>com.openxc</groupId>
            <artifactId>openxc</artifactId>
            <version>1.0.0</version>
            <type>apklib</type>
        </dependency>
    </dependencies>

[openxc-android]: https://github.com/openxc/openxc-android

### Android Manifest

The OpenXC services must be defined in your application's `AndroidManifest.xml`
before using them. Add this inside the `<application>` tag:

      <service android:name="com.openxc.VehicleService"/>
      <service android:name="com.openxc.remote.RemoteVehicleService" android:process=":remote">
          <intent-filter>
              <action android:name="com.openxc.remote.RemoteVehicleServiceInterface" />
          </intent-filter>
      </service>

You must also specify that your application uses the USB host feature (inside
the `<application>` tag):

      <uses-feature android:name="android.hardware.usb.host"
              android:required="true" />

### USB Device Filter

If you want your application to refresh the vehicle interface when the USB
vehicle interface is plugged in, you must include an XML file defining a USB
device filter. Save this XML to `res/xml/device_filter.xml`:

    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <usb-device vendor-id="1240" />
    </resources>

and in the `AndroidManifest.xml`:

      <activity android:name="com.openxc.remote.sources.usb.UsbDeviceAttachmentActivity">
            <intent-filter>
                <action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />
            </intent-filter>

            <meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
                    android:resource="@xml/device_filter" />
      </activity>
