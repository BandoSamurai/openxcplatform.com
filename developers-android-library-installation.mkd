---
layout: default
permalink: /developers/android/library-installation.html
---

Android Library Installation
=============

The OpenXC functionality is exposed via a Java library that includes some
Android services your application can use, and it is compiled and package with
your own code; there is no no OpenXC app to install.

The library is available on GitHub in the [openxc-android][] repository. Right
now, the code is only available if you have access to the early release and are
logged into GitHub.

[openxc-android]: https://github.com/openxc/openxc-android

## Installation

This project declares dependencies with Maven - you can theoritcally choose to use the
project via Eclipse, via the command line, or both ways simultaneously. At the
moment, you'll need to install the command-line version of Maven (and not just
use the maven built-in to Eclipse) because of the Android SDK requirement
described in the next section.

Make sure you install Maven 3.0.4 or later - it's just a Java program, so as
long as you have a working JRE, "installing" Maven just means extracting the
.zip file somewhere in your shell's `PATH` and running the `mvn` executable.

### Android SDK and Maven

The most recent version of the Android SDK currently available in the central
Maven repository is unfortunately 2.3. You'll need to install a more recent
version in your own local Maven repository.

The recommended method is to use the
[maven-android-sdk-deployer](https://github.com/mosabua/maven-android-sdk-deployer).
You will need to set the the `ANDROID_HOME` environment variable (see the
project's
[README](https://github.com/mosabua/maven-android-sdk-deployer/blob/master/README.markdown)
for more details) and run Maven:


    $ export ANDROID_HOME=/path/to/the/android/sdk
    $ cd /path/to/cloned/sdk/deployer/repo
    $ mvn install -P 3.1

If you have a remote Maven repository you share with others, I'm sure they would
thank you if you uploaded the resulting files - that way, nobody needs to do
this part.

### Using Eclipse

* Install [Eclipse](http://www.eclipse.org/downloads/) Indigo or later for Java
  Developers. Other versions do not install Maven, which is required.
* Install the [Android SDK and ADT plugin for Eclipse](http://developer.android.com/sdk/installing.html)
  from Google.
* Clone the [openxc-android][] repo (this repo).
* Open Eclipse and go to `File -> Import -> Maven -> Existing Maven Projects`.
  Browse to where you cloned the repository and import the `openxc` project.

![Importing a Maven Project in Eclipse](/images/screenshots/eclipse-import-maven.png)

* You will be prompted to install the m2e-android connector - do that, then
  restart Eclipse.
* Right click on the `openxc` project, go to Maven -> Update Project
  Configuration. Select the `openxc` project in the dialog and click OK.

![Changing the Project Dependencies](/images/screenshots/eclipse-project-dependency.png)

* Start a new Android project for your application if you haven't already.
* Right click on your project and go to `Properties -> Andoird`.
    In the "Library" section add a reference to the `openxc` project.

![Updating the Maven project config](/images/screenshots/eclipse-update-maven.png)

* There should be no changes in the repository at this point (`git status`
  should report nothing) and there should be no errors in Eclipse.

![Clean working directory](/images/screenshots/git-status.png)

### Using the Command Line

If you prefer to compile and deploy from the command line, you can use Maven
without Eclipse.

* Install [Maven](http://maven.apache.org/) - it's just a Java application, so
  "installation" can be as simple as extracting the download and making sure the
  `mvn` executable is somewhere on your shell's `PATH`.
* Follow the instructions in the "Android SDK and Maven" section of this
  document to install the latest version of the Android SDK for Maven
* Clone the [openxc-android][] repo (this repo).
* Run `mvn install -p openxc` from the `openxc` directory to package and install
  the `openxc` library to your local Maven repository.
* Start a new Android project if you haven't already (check out the
  `example/pom.xml` if you're unfamiliar with setting up a Maven project) and
  make sure the `openxc` dependency is declared like so:

    <dependencies>
        <dependency>
            <groupId>com.openxc</groupId>
            <artifactId>openxc</artifactId>
            <version>1.1</version>
            <type>apklib</type>
        </dependency>
    </dependencies>

[openxc-android]: https://github.com/openxc/openxc-android

### Android Manifest

The OpenXC services must be defined in your application's `AndroidManifest.xml`
before using them. Add this `<service>` tag to your app:

    <application>
        ...
        <service android:name="com.openxc.VehicleService"/>
        ...
    </application>

### Enabler

The best way to make the USB vehicle interface available to your app is to
install the **OpenXC Enabler** app - this is in the `openxc-android` source, but
we've also made it available as an APK in the [downloads][] section. This app
starts the vehicle service at boot and makes sure it stays alive - this way,
your app doesn't have to worry about USB permissions or reacting to device
detachment/reattachment.

After you install the app, it's important that you launch it once manually from
the app drawer, otherwise the service will not automatically start at boot.

If you don't want to use the enabler app, it's certainly possible to start the
service from your application directly. Look at the [source for the
enabler][enabler] to see exactly how to accomplish that.

[downloads]: https://github.com/openxc/openxc-android/downloads
[enabler]: https://github.com/openxc/openxc-android/tree/master/enabler
